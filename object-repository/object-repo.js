module.exports = {

  emailInputField: ({ elementName: 'emailInputField', elementPath: '//input[@id="email"]' }),
  passwordInputField: ({ elementName: 'passwordInputField', elementPath: '//input[@id="password"]' }),
  signInButton: ({ elementName: 'signInButton', elementPath: '//span[@id="btnSignIn"]' }),
  profileImage: ({ elementName: 'profileImage', elementPath: '(//div[@class="right-column"]//following-sibling::div)[2]' }),
  loggedInUserEmail: ({ elementName: 'loggedInUserEmail', elementPath: '//span[@id="textInsertionTarget2"]' }),
  signOut: ({ elementName: 'signOut', elementPath: '//span[text()="Sign Out"]' }),
  haveAnAccountLoginButton: ({ elementName: 'haveAnAccountLoginButton', elementPath: '//div[@class="login-btn"]' }),
  loginErrorMessageText: ({ elementName: 'loginErrorMessageText', elementPath: '//p[contains(text(),"Incorrect")]' }),
  emailPlaceholder: ({ elementName: 'emailPlaceholder', elementPath: '//span[contains(text(),"EMAIL OR PHONE NUMBER")]' }),
  passwordPlaceholder: ({ elementName: 'passwordPlaceholder', elementPath: '//span[text()="PASSWORD"]' }),
  forgotPassword: ({ elementName: 'forgotPassword', elementPath: '//a[text()="Forgot password?"]' }),
  forgotPasswordPageText: ({ elementName: 'forgotPasswordPageText', elementPath: '//p[contains(text(),"Please enter your email")]' }),
  rememberMeCheckbox: ({ elementName: 'rememberMeCheckbox', elementPath: '//input[@id="rememberMe" and @checked="checked" and @name="rememberMe"]' }),
  passwordResetEmailInputField: ({ elementName: 'passwordResetEmailInputField', elementPath: '//input[@id="txt_user_emailAddress"]' }),
  sendButtonPasswordResetPage: ({ elementName: 'sendButtonPasswordResetPage', elementPath: '//button[text()="Send"]' }),
  unregisteredEmailError: ({ elementName: 'unregisteredEmailError', elementPath: '//div[@id="error" and contains(text(),"This email address is not registered")]' }),
  invalidEmailError: ({ elementName: 'invalidEmailError', elementPath: '//div[@id="error" and contains(text(),"This is not a valid email address")]' }),
  passwordResetSuccessMessage: ({ elementName: 'passwordResetSuccessMessage', elementPath: '//p[contains(text(), "Email sent to")]' }),
  inlineInsertTextField: ({ elementName: 'inlineInsertTextField', elementPath: '//span[@id="inlineInsertPlaceholderText"]' }),
  toInputField: ({ elementName: 'toInputField', elementPath: '//div[contains(@class,"tags no-suggestion")]' }),
  typeToInputField: ({ elementName: 'typeToInputField', elementPath: '//div[@class="tags no-suggestion focused"]//input[@type="text"]' }),
  suggestedPostRecipient: ({ elementName: 'suggestedPostRecipient', elementPath: '//div[@class="img-label-list-item"]' }),
  noteTitleInputField: ({ elementName: 'noteTitleInputField', elementPath: '//input[@id="noteTitleField"]' }),
  noteBodyInputField: ({ elementName: 'noteBodyInputField', elementPath: '//div[@class="ql-editor scroll-enabled"]' }),
  noteShareButton: ({ elementName: 'noteShareButton', elementPath: '//button[text()="Share"]' }),
  editButtonPostDetailView: ({ elementName: 'editButtonPostDetailView', elementPath: '(//span/button[text()="Edit"])[2]' }),
  doneButtonPostDetailView: ({ elementName: 'doneButtonPostDetailView', elementPath: '(//button[contains(text(),"Done")])[1] | (//button[contains(text(),"Done")])[2]' }),
  postCommentArea: ({ elementName: 'postCommentArea', elementPath: '(//div[@class="dummy-text-area"])[last()]' }),
  postCommentInputField: ({ elementName: 'postCommentInputField', elementPath: '//div[@id="ql-editor-2"]' }),
  postCommentText: ({ elementName: 'postCommentText', elementPath: '(//div[@bo-show="!showMore"]/p)[last()]' }),
  usersSuggestionListInCommentSection: ({ elementName: 'usersSuggestionListInCommentSection', elementPath: '//ul[@class="rte-autocomplete dropdown-menu dropdown-cont"]/li' }),
  copyCommentLink: ({ elementName: 'copyCommentLink', elementPath: '//a/span[text()="Copy comment link"]' }),
  copiedToClipboardAlertMessage: ({ elementName: 'copiedToClipboardAlertMessage', elementPath: '//span[text()="Copied to clipboard"]' }),
  editCommentLinkPostDetailView: ({ elementName: 'editCommentLinkPostDetailView', elementPath: '//a/span[text()="Edit"]' }),
  editedNowTimestampForComment: ({ elementName: 'editedNowTimestampForComment', elementPath: '(//a[text()="now"])[2]' }),
  deleteCommentLinkPostDetailView: ({ elementName: 'deleteCommentLinkPostDetailView', elementPath: '//a/span[text()="Delete"]' }),
  deleteCommentButton: ({ elementName: 'deleteCommentButton', elementPath: '//button[text()="Delete"]' }),
  emoticonIconForCommentPostDetailView: ({ elementName: 'emoticonIconForCommentPostDetailView', elementPath: '//div[@class="emoji-popup-btn unselected"]' }),
  firstEmoticonIcon: ({ elementName: 'firstEmoticonIcon', elementPath: '(//div[@title="Grinning face :grinning:"])[1]' }),
  peopleCategory: ({ elementName: 'peopleCategory', elementPath: `//div[@class='category-label' and contains(text(),'People')]` }),
  commentFileUploadPostDetailView: ({ elementName: 'commentFileUploadPostDetailView', elementPath: '(//input[@class="comment-file-input"])[last()]' }),
  fileUploadProgressLine: ({ elementName: 'fileUploadProgressLine', elementPath: '//div[@class="progress-line" and @style="width: 100%;"]' }),
  cancelDeleteCommentButton: ({ elementName: 'cancelDeleteCommentButton', elementPath: '//button[text()="Cancel"]' }),
  whatsNewIconText: ({ elementName: 'whatsNewIconText', elementPath: `//a[text()="What's New"]` }),
  privateHeadingTextUnderGroupsChannels: ({ elementName: 'privateHeadingTextUnderGroupsChannels', elementPath: '//span[text()="PRIVATE"]' }),
  createNewGroup: ({ elementName: 'createNewGroup', elementPath: '//div[@class="heading"]/i' }),
  nextButton: ({ elementName: 'nextButton', elementPath: '//button[@class="btn btn-primary" and contains(text(),"Next")]' }),
  grpName: ({ elementName: 'grpName', elementPath: '//div[@class="form-group"]/input[@placeholder="e.g Marketing"]' }),
  nextButtonForGrpCreation: ({ elementName: 'nextButtonForGrpCreation', elementPath: '//button[@id="crtGrpNxtBtn"]' }),
  createGroup: ({ elementName: 'createGroup', elementPath: '//button[@class="btn btn-primary" and contains(text(),"Create group")]' }),
  privateGroup: ({ elementName: 'privateGroup', elementPath: '//div[@class="group-create-type"]//div/div/div[contains(text(),"Private")]' }),
  deleteGroup: ({ elementName: 'deleteGroup', elementPath: '//span[contains(text(),"Delete group")]' }),
  deleteButton: ({ elementName: 'deleteButton', elementPath: '//button[contains(text(),"Delete")]' }),
  myFeed: ({ elementName: 'myFeed', elementPath: '//li/a[contains(text(),"My feed")]' }),
  editButton: ({ elementName: 'editButton', elementPath: '(//span/button[text()="Edit"])[2]' }),
  pinContentToTopOfgrpList: ({ elementName: 'pinContentToTopOfgrpList', elementPath: '//li//span[contains(text(),"Pin content to the top of this group")]' }),
  linkTo: ({ elementName: 'linkTo', elementPath: '//input[@name="url"]' }),
  pinToGrp: ({ elementName: 'pinToGrp', elementPath: '//button[contains(text(),"Pin to group")]' }),
  removeLink: ({ elementName: 'removeLink', elementPath: '//div[@class="edit-remove-link"]/a[contains(text(),"Remove")]' }),
  saveChanges: ({ elementName: 'saveChanges', elementPath: '//button[@class="btn btn-primary" and contains(text(),"Save Changes")]' }),
  pinToTopOfgrpList: ({ elementName: 'pinToTopOfgrpList', elementPath: '//li//span[contains(text(),"Pin to top of my group list")]' }),
  unpinToTopofgrpList: ({ elementName: 'unpinToTopofgrpList', elementPath: '//li//span[contains(text(),"Unpin from top of my group list")]' }),
  seeMorePrivate: ({ elementName: 'seeMorePrivate', elementPath: '//li[@bo-show="privateGroupsCollapsed && privateGroupsArray && privateGroupsArray.models.length > 5"]/a | //li[@bo-show="privateGroupsCollapsed && privateGroupsArray && privateGroupsArray.length > 5"]/a' }),
  closeIcon: ({ elementName: 'closeIcon', elementPath: '//button[@class="close"]' }),
  feedSearchInputField: ({ elementName: 'feedSearchInputField', elementPath: '//input[@id="feed_search_input"]' }),
  searchIcon: ({ elementName: 'searchIcon', elementPath: '//*[@id="feed_search_bar"]/form/div[2]/i[1]' }),
  pollIcon: ({ elementName: 'pollIcon', elementPath: '//*[@id="poll-icon" and @class="icon_poll-gray"]' }),
  pollwithImages: ({ elementName: 'pollwithImages', elementPath: '//li[contains(text(),"Poll with Images")]' }),
  attachment: ({ elementName: 'attachment', elementPath: '//cnv-poll//input[@class="file-input ng-hide"]' }),
  pollDeletePost: ({ elementName: 'pollDeletePost', elementPath: '//span[text()="Delete post"]' }),
  pollwithText: ({ elementName: 'pollwithText', elementPath: '//li[contains(text(),"Poll with Text")]' }),
  pollColorIcon: ({ elementName: 'pollColorIcon', elementPath: '//*[@id="poll-icon" and @class="icon_poll-blue"]' }),
  progressBar: ({ elementName: 'progressBar', elementPath: '//div[@class="internal-wrapper"]//div[@class="progress-bar"]' }),
  option1: ({ elementName: 'option1', elementPath: '//*[@id="txt_0"]' }),
  option2: ({ elementName: 'option2', elementPath: '//*[@id="txt_1"]' }),
  addNewChoice: ({ elementName: 'addNewChoice', elementPath: '//span[contains(text(),"Add a new choice")]' }),
  locationIcon: ({ elementName: 'locationIcon', elementPath: '//*[@id="location-icon"]' }),
  pollEnds: ({ elementName: 'pollEnds', elementPath: '//*[@id="poll_ends_container"]/label' }),
  calendarIcon: ({ elementName: 'calendarIcon', elementPath: '//*[@id="poll_ends_container"]/span[@class="poll-calendar"]/span[1]/i' }),
  hoursIcon: ({ elementName: 'hoursIcon', elementPath: '//*[@id="hrs-label"]' }),
  mintsIcon: ({ elementName: 'mintsIcon', elementPath: '//*[@id="mins-label"]' }),
  peopleWhoVotedForThis: ({ elementName: 'peopleWhoVotedForThis', elementPath: '//div[@class="modal-header"]/h4[contains(text(),"People who voted for this")]' }),
  closeButton: ({ elementName: 'closeButton', elementPath: '//button[@class="close"]' }),
  closeLocationIcon: ({ elementName: 'closeLocationIcon', elementPath: '//div[@class="location-container"]/div[@class="close-btn"]/i' }),
  locationIconBlueColor: ({ elementName: 'locationIconBlueColor', elementPath: '//*[@id="location-icon" and @class="icons_Location-blue"] | //div[@class="add-location-blue"]' }),
  editButtonInPostDetailView: ({ elementName: 'editButtonInPostDetailView', elementPath: '(//span/button[text()="Edit"])[2]' }),
  locationIconInDetailView: ({ elementName: 'locationIconInDetailView', elementPath: '//*[@id="location-icon-editor"]' }),
  doneButtonInPostDetailView: ({ elementName: 'doneButtonInPostDetailView', elementPath: '(//button[contains(text(),"Done")])[1] | (//button[contains(text(),"Done")])[2]' }),
  more: ({ elementName: 'more', elementPath: '(//a/span[contains(text(),"More")])[1]' }),
  viewRevisions: ({ elementName: 'viewRevisions', elementPath: '(//a[contains(text(),"View revisions")])[1]' }),
  closeButtonInDetailView: ({ elementName: 'closeButtonInDetailView', elementPath: '//div[@class="close-btn"]/i' }),
  textToDisplay: ({ elementName: 'textToDisplay', elementPath: '//input[@name="resource_name"]' }),
  gifIcon: ({ elementName: 'gifIcon', elementPath: '//div[@id="iShowGiphyPopup"]' }),
  firstGifImage: ({ elementName: 'firstGifImage', elementPath: '(//img[@class="lazy"])[1]' }),
  firstGifUploadedVerification: ({ elementName: 'firstGifUploadedVerification', elementPath: '(//img[@class="file-converted"])[1]' }),
  createTagIcon: ({ elementName: 'createTagIcon', elementPath: '//div[@class="icon_tag-01-01-darkgray" or @class="icon_tag-01-01-darkgray-old"]' }),
  startTypingText: ({ elementName: 'startTypingText', elementPath: '//a[text()="start typing..."]' }),
  tagInputField: ({ elementName: 'tagInputField', elementPath: '//a[text()="start typing..."]/following-sibling::*[1]' }),
  richTextFormatIcon: ({ elementName: 'richTextFormatIcon', elementPath: '//div[@class="editor-toolbar texttoolbar-darkgray"]' }),
  boldIcon: ({ elementName: 'boldIcon', elementPath: '//div[@id="inline-insert-toolbar"]//span[@class="ql-format-group"]//span[@class="ql-format-button ql-bold icons3_Bold-darkgray"]' }),
  bulletPoints: ({ elementName: 'bulletPoints', elementPath: '//span[@class="ql-format-button ql-bullet orderedlist-darkgray"] ' }),
  colorPickerIcon: ({ elementName: 'colorPickerIcon', elementPath: '//span[@class="ql-picker-label"]' }),
  redColorTextBox: ({ elementName: 'redColorTextBox', elementPath: '//span[@data-value="#ed462e"]' }),
  colorProperty: ({ elementName: 'colorProperty', elementPath: '//span[@style="color: rgb(237, 70, 46);"]' }),
  crossedTextFormatting: ({ elementName: 'crossedTextFormatting', elementPath: '//span[@class="ql-format-button ql-strike strikethrough-darkgray"]' }),
  savedInDrafts: ({ elementName: 'savedInDrafts', elementPath: '//label[text()="Saved in Drafts"]' }),
  draftsLink: ({ elementName: 'draftsLink', elementPath: '//a[text()="Drafts"]' }),
  emoticonIcon: ({ elementName: 'emoticonIcon', elementPath: '//div[@class="emoji-popup-btn unselected"]' }),
  selectingEmoji: ({ elementName: 'selectingEmoji', elementPath: '//li[@class="emoji-category"]/div[@class="category-label" and contains(text(),"People")]/../ul[@class="emoji-list"]//div[@title="Grinning face :grinning:"]' }),
  italicIcon: ({ elementName: 'italicIcon', elementPath: '//span[@class="ql-format-button ql-italic italic-darkgray"]' }),
  underlineIcon: ({ elementName: 'underlineIcon', elementPath: '//span[@class="ql-format-button ql-underline underline-darkgray"]' }),
  addCommentsThumbnail: ({ elementName: 'addCommentsThumbnail', elementPath: '//div[@id="ql-editor-1"]' }),
  numberFormatIcon: ({ elementName: 'numberFormatIcon', elementPath: '//span[@class="ql-format-button ql-list numberedlist-darkgray"]' }),
  textforSerialPoints: ({ elementName: 'textforSerialPoints', elementPath: '//div[@id="ql-editor-1"]' }),
  div_Button: ({ elementName: 'div_Button', elementPath: '//div[@class="editor-toolbar texttoolbar-darkgray"]' }),
  spanInsertLinkButton: ({ elementName: 'spanInsertLinkButton', elementPath: '//span[contains(@class,"ql-inline-link")]' }),
  inputUrl: ({ elementName: 'inputUrl', elementPath: '//input[@name="url"]' }),
  textToDisplay: ({ elementName: 'textToDisplay', elementPath: '//input[@name="resource_name"]' }),
  insertButton: ({ elementName: 'insertButton', elementPath: '//button[@type="submit"]' }),
  fileUploadForFeed: ({ elementName: 'fileUploadForFeed', elementPath: '//div[@class="icons2_Attach-darkgray attachIconInlineInsert"]/input[@name="file"]' }),
  imageFileUploadVerification: ({ elementName: 'imageFileUploadVerification', elementPath: '//img[@class="file-converted"]' }),
  companyLogo: ({ elementName: 'companyLogo', elementPath: '//a[contains(@class,"convo-logo")]//img' }),
  privacyButton: ({ elementName: 'privacyButton', elementPath: '//a[text()="Privacy"]' }),
  securityButton: ({ elementName: 'securityButton', elementPath: '//a[text()="Security"]' }),
  gdprButton: ({ elementName: 'gdprButton', elementPath: '//a[text()="GDPR"]' }),
  termsButton: ({ elementName: 'termsButton', elementPath: '//a[text()="Terms of Service"]' }),
  permissionLinkInMoreMenuBar: ({ elementName: 'permissionLinkInMoreMenuBar', elementPath: '(//a[text()="Permissions"])[1]' }),
  commentOnlyFromPermissionsContextMenu: ({ elementName: 'commentOnlyFromPermissionsContextMenu', elementPath: '(//span[text()="Comment only"])[1]' }),
  permissionsUpdatedSuccessMessage: ({ elementName: 'permissionsUpdatedSuccessMessage', elementPath: '//span[text()="Permissions updated"]' }),
  tickMarkWithCanCommentOnlyPermission: ({ elementName: 'tickMarkWithCanCommentOnlyPermission', elementPath: '(//li/a/span[contains(text(),"Comment only")])[1]/..//i[@class="cnv-icons-12 icon-cnv-tick"]' }),
  viewOnlyFromPermissionsContextMenu: ({ elementName: 'viewOnlyFromPermissionsContextMenu', elementPath: '(//span[text()="View only"])[1]' }),
  addTagsButtonInPostDetailView: ({ elementName: 'addTagsButtonInPostDetailView', elementPath: '//div[text()="Add tags"]' }),
  tagInputField: ({ elementName: 'tagInputField', elementPath: '//div[@class="tags focused"]/input' }),
  doneButtonOnTagPost: ({ elementName: 'doneButtonOnTagPost', elementPath: '//div[@class="modal-footer"]/button[contains(text(),"Done")]' }),
  anchorLinkClicked: ({ elementName: 'anchorLinkClicked', elementPath: '(//div[@class="tags"]/a)[5]' }),
  addTagInputField: ({ elementName: 'addTagInputField', elementPath: '//a[@class="add-more-placeholder" and contains(text(),"start")]/../input' }),
  removeTag: ({ elementName: 'removeTag', elementPath: '//div/a[@class="remove-button icons2_Close-lightgray"]' }),
  postEditorInPostDetailView: ({ elementName: 'postEditorInPostDetailView', elementPath: '//div[@class="ql-editor" and @contenteditable="true"]' }),
  autoSavedText: ({ elementName: 'autoSavedText', elementPath: '(//span[contains(text(),"Autosaved")])[1]' }),
  likeButtonInPostDetailView: ({ elementName: 'likeButtonInPostDetailView', elementPath: '//div[text()="Like"]' }),
  unlikeButton: ({ elementName: 'unlikeButton', elementPath: '//div[contains(text(),"Unlike")]' }),
  addTag: ({ elementName: 'addTag', elementPath: '//a[@class="add-more-placeholder" and contains(text(),"start")]' }),
  muteThisPost: ({ elementName: 'muteThisPost', elementPath: '(//a[text()="Mute this post"])[1]' }),
  mutedAlertMessage: ({ elementName: 'mutedAlertMessage ', elementPath: '//span[contains(text(),"Muted")]' }),
  hidePanel: ({ elementName: 'hidePanel', elementPath: '//div[@class="format-label" and contains(text(),"Hide panel")]' }),
  showPanel: ({ elementName: 'showPanel', elementPath: '//div[@class="format-label" and contains(text(),"Show panel")]' }),
  starPostInDetailView: ({ elementName: 'starPostInDetailView', elementPath: '//div[contains(text(),"Star post")]' }),
  UnstarPostInDetailView: ({ elementName: 'UnstarPostInDetailView', elementPath: '//div[contains(text(),"Unstar post")]' }),
  publicGroups: ({ elementName: 'publicGroups', elementPath: '//span[text()="PUBLIC"]/../following-sibling::li//a' }),
  openPostLinkInPostContextMenu: ({ elementName: 'openPostLinkInPostContextMenu', elementPath: '//a/span[text()="Open post"]' }),
  uploadLinkInPostDetailView: ({ elementName: 'uploadLinkInPostDetailView', elementPath: '//a[text()="Upload"]' }),
  editPostLinkInPostContextMenu: ({ elementName: 'editPostLinkInPostContextMenu', elementPath: '//a/span[text()="Edit post"]' }),
  editPostLinkDisabledInPostContextMenu: ({ elementName: 'editPostLinkDisabledInPostContextMenu', elementPath: `//a[contains(@class,'disabled')]/span[text()="Edit post"]` }),
  doneButtonInPostDetailView: ({ elementName: 'doneButtonInPostDetailView', elementPath: '(//button[text()="Done"])[1]' }),
  editButtonInPostDetailView: ({ elementName: 'editButtonInPostDetailView', elementPath: '(//button[text()="Edit"])[2]' }),
  permissionsLinkInPostContextMenu: ({ elementName: 'permissionsLinkInPostContextMenu', elementPath: '//a/span[text()="Permissions"]' }),
  canEditAndCommentLinkInPostContextMenu: ({ elementName: 'canEditAndCommentLinkInPostContextMenu', elementPath: '//a/span[text()="Can edit and comment"]' }),
  permissionsUpdatedSuccessMessage: ({ elementName: 'permissionsUpdatedSuccessMessage', elementPath: '//span[text()="Permissions updated"]' }),
  commentOnlyLinkInPostContextMenu: ({ elementName: 'commentOnlyLinkInPostContextMenu', elementPath: '//a/span[text()="Comment only"]' }),
  viewOnlyLinkInPostContextMenu: ({ elementName: 'viewOnlyLinkInPostContextMenu', elementPath: '//a/span[text()="View only"]' }),
  muteNotificationsLinkInPostContextMenu: ({ elementName: 'muteNotificationsLinkInPostContextMenu', elementPath: '//a/span[text()="Mute notifications"]' }),
  postMuteIcon: ({ elementName: 'postMuteIcon', elementPath: '//div[@class="action-items-wrapper"]/i' }),
  unmuteNotificationsLinkInPostContextMenu: ({ elementName: 'unmuteNotificationsLinkInPostContextMenu', elementPath: '//a/span[text()="Unmute notifications"]' }),
  addTagsLinkInPostContextMenu: ({ elementName: 'addTagsLinkInPostContextMenu', elementPath: '//a/span[text()="Add tags"]' }),
  tagInputFieldInTagThisPostModal: ({ elementName: 'tagInputFieldInTagThisPostModal', elementPath: '//div[@class="modal-body sharepost"]//a[contains(text(),"+Add more")]/..//input' }),
  doneButtonInTagThisPostModal: ({ elementName: 'doneButtonInTagThisPostModal', elementPath: '//button[contains(text(),"Done")]' }),
  starThisPostLinkInPostContextMenu: ({ elementName: 'starThisPostLinkInPostContextMenu', elementPath: '//a/span[text()="Star this post"]' }),
  unstarThisPostLinkInPostContextMenu: ({ elementName: 'unstarThisPostLinkInPostContextMenu', elementPath: '//a/span[text()="Unstar this post"]' }),
  networkLogo: ({ elementName: 'networkLogo', elementPath: '(//img[@bo-src="networkLogo"])[last()]' }),
  profileImageDropdown: ({ elementName: 'profileImageDropdown', elementPath: '//div[@class="right-column"]/div/cnv-dropdowns/span/a/i' }),
  editProfileLink: ({ elementName: 'editProfileLink', elementPath: '//span[text()="Edit profile"]' }),
  aboutMeHeadingUserProfileView: ({ elementName: 'aboutMeHeadingUserProfileView', elementPath: '//h2[text()="About Me"]' }),
  cancelButtonUserProfileView: ({ elementName: 'cancelButtonUserProfileView', elementPath: '//button[text()="Cancel"]' }),
  fixitLinkUserFeedView: ({ elementName: 'fixitLinkUserFeedView', elementPath: '//a[text()="Fix it"]' }),
  userProfilePhoneField: ({ elementName: 'userProfilePhoneField', elementPath: '//span[text()="Add phone no. with country code" and @class="input-text-label-content"]' }),
  userProfilePhoneInputField: ({ elementName: 'userProfilePhoneInputField', elementPath: '//span/i[@class="action_icon cnv-icons-20 icons_Phone-darkgray"]/../following-sibling::input' }),
  userProfileLocationField: ({ elementName: 'userProfileLocationField', elementPath: '//span[text()="Add your location" and @class="input-text-label-content"]' }),
  userProfileLocationInputField: ({ elementName: 'userProfileLocationInputField', elementPath: '//span/i[@class="action_icon cnv-icons-20 icons_Location-darkgray"]/../following-sibling::input' }),
  userProfileLinkedinField: ({ elementName: 'userProfileLinkedinField', elementPath: '//span[text()="linkedin.com/pub/user" and @class="input-text-label-content"]' }),
  userProfileLinkedinInputField: ({ elementName: 'userProfileLinkedinInputField', elementPath: '//span/i[@class="action_icon cnv-icons-20 linkedin-darkgray"]/../following-sibling::input' }),
  userProfileTwitterField: ({ elementName: 'userProfileTwitterField', elementPath: '//span[text()="twitter.com/user" and @class="input-text-label-content"]' }),
  userProfileTwitterInputField: ({ elementName: 'userProfileTwitterInputField', elementPath: '//span/i[@class="action_icon cnv-icons-20 twitter-darkgray"]/../following-sibling::input' }),
  userProfileSaveButton: ({ elementName: 'userProfileSaveButton', elementPath: '//button[text()="Save"]' }),
  editProfileButton: ({ elementName: 'editProfileButton', elementPath: '//button[text()="Edit Profile"]' }),
  userProfilePhoneFieldWithValue: ({ elementName: 'userProfilePhoneFieldWithValue', elementPath: '//div[@class="profile-details"]/span[contains(@ng-if,"phone")]/span/span' }),
  userProfileLocationFieldWithValue: ({ elementName: 'userProfileLocationFieldWithValue', elementPath: '//div[@class="profile-details"]/span[contains(@ng-if,"location")]/span' }),
  userProfileLinkedinFieldWithValue: ({ elementName: 'userProfileLinkedinFieldWithValue', elementPath: '//span[contains(@ng-if,"linkedin")]/a' }),
  userProfileTwitterFieldWithValue: ({ elementName: 'userProfileTwitterFieldWithValue', elementPath: '//span[contains(@ng-if,"twitter")]/a' }),
  topGroupsUserFeedView: ({ elementName: 'topGroupsUserFeedView', elementPath: `//div[@bo-show="topGroups"]/ul/li/a` }),
  userProfilePhoneFieldFilledWithValue: ({ elementName: 'userProfilePhoneFieldFilledWithValue', elementPath: '//p/strong[text()="Phone: "]/following-sibling::span[@ng-class="textLabelContentClass"]' }),
  userProfileLocationFieldFilledWithValue: ({ elementName: 'userProfileLocationFieldFilledWithValue', elementPath: '//p/strong[text()="Location: "]/following-sibling::span[@ng-class="textLabelContentClass"]' }),
  userProfileLinkedinFieldFilledWithValue: ({ elementName: 'userProfileLinkedinFieldFilledWithValue', elementPath: '//p/strong[text()="LinkedIn: "]/following-sibling::span[@ng-class="textLabelContentClass"]' }),
  userProfileTwitterFieldFilledWithValue: ({ elementName: 'userProfileTwitterFieldFilledWithValue', elementPath: '//p/strong[text()="Twitter: "]/following-sibling::span[@ng-class="textLabelContentClass"]' }),
  userProfileViewAddPhoneNumber: ({ elementName: 'userProfileViewAddPhoneNumber', elementPath: '//span[text()="Add Phone Number"]' }),
  userFeedViewProfileImage: ({ elementName: 'userFeedViewProfileImage', elementPath: '//cnv-user-profile-image[@profile="true"]' }),
  userFeedViewProfileImageUpdateLink: ({ elementName: 'userFeedViewProfileImageUpdateLink', elementPath: '//div[@ng-click="openProfilePictureModal()" and contains(text(),"Update")]' }),
  userFeedViewProfileImageUploadInputField: ({ elementName: 'userFeedViewProfileImageUploadInputField', elementPath: '//input[@id="combinedProfileUploadInput"]' }),
  applyPhotoButton: ({ elementName: 'applyPhotoButton', elementPath: '//button[text()="Apply Photo"]' }),
  applyPhotoGeneratingThumbnails: ({ elementName: 'applyPhotoGeneratingThumbnails', elementPath: '//div[text()="Generating thumbnails..."]' }),
  profilePictureUploadSuccess: ({ elementName: 'profilePictureUploadSuccess', elementPath: '//div[@class="cnv-note-gallery-container"]/div/ul/li/i[text()="1 new"]' }),
  userProfileViewUploadPicture: ({ elementName: 'userProfileViewUploadPicture', elementPath: '//div[text()="Upload" and @ng-click="openProfilePictureModal()"]' }),
  feedFileUploadInputField: ({ elementName: 'feedFileUploadInputField', elementPath: `//div[@class='icons2_Attach-darkgray attachIconInlineInsert']/input[@name='file']` }),
  fileUploadAndConversionSuccess: ({ elementName: 'fileUploadAndConversionSuccess', elementPath: `//img[@class='file-converted']` }),
  galleryViewElipses: ({ elementName: 'galleryViewElipses', elementPath: `//a[@id='opts-menu']/span` }),
  galleryViewElipsesCopyLink: ({ elementName: 'galleryViewElipsesCopyLink', elementPath: `//li/a[contains(@ng-click, 'promptCopyLink()')]` }),
  greenChatActiveIcon: ({ elementName: 'greenChatActiveIcon', elementPath: `//span[text()='Chats']/../div/div[@class='listUserStatusOnline']` }),
  chatSearchInputField: ({ elementName: 'chatSearchInputField', elementPath: `//input[@placeholder='SEARCH']` }),
  searchedChatUserSuggestion: ({ elementName: 'searchedChatUserSuggestion', elementPath: `//div[@id='chatsView']//div[@class='listUserName']` }),
  firstChatWindowInputField: ({ elementName: 'firstChatWindowInputField', elementPath: `//div[@id='ql-editor-1']` }),
  progressBar: ({ elementName: 'progressBar', elementPath: '//div[@class="progress-bar ng-hide"]' }),
  progressBar2: ({ elementName: 'progressBar2', elementPath: '(//div[@class="progress-bar ng-hide"])[2]' }),
  disabledShareButton: ({ elementName: 'disabledShareButton', elementPath: '//button[@disabled="disabled" and text()="Share"]' }),
  rectangleTool: ({ elementName: 'rectangleTool', elementPath: `//div[@class='row galleryHeaderContainer']/ul/li[@title='Rectangle']/a` }),
  galleryViewImageCanvasArea: ({ elementName: 'galleryViewImageCanvasArea', elementPath: `//canvas[@id="img-drawing-canvas"]` }),
  commentOnThisTooltip: ({ elementName: 'commentOnThisTooltip', elementPath: `//span[contains(text(),'Comment on this')]` }),
  snippetCommentInputField: ({ elementName: 'snippetCommentInputField', elementPath: `(//div[@class='row comment-editor-container']//div/div//div[@class='feed-comment-editor-active-cont edit-mode']//cnv-editor/div/div)[1]` }),
  editorText: ({ elementName: 'editorText', elementPath: '//div[@class="ql-editor"]/div' }),
  commentOnThisPopup: ({ elementName: 'commentOnThisPopup', elementPath: '//span[text()="Comment on this"]' }),
  imageUploadinput: ({ elementName: 'imageUploadinput', elementPath: '//div[@class="notesAppContainer note-container"]/input' }),
  deleteImage: ({ elementName: 'deleteImage', elementPath: '//span/a[contains(text(),"Delete")]' }),
  deleteButtonForFile: ({ elementName: 'deleteButtonForFile', elementPath: '//button[contains(text(),"Delete")]' }),
  shareThis: ({ elementName: 'shareThis', elementPath: '//div[@class="format-label" and contains(text(),"Share this")]' }),
  peopleandGroupInput: ({ elementName: 'peopleandGroupInput', elementPath: '(.//*[normalize-space(text()) and normalize-space(.)="+Add more"])[1]/following::input[1]' }),
  publish: ({ elementName: 'publish', elementPath: '//button[contains(text(),"Publish")]' }),
  shared: ({ elementName: 'shared', elementPath: '//span[contains(text(),"Shared")]' }),
  deletePost: ({ elementName: 'deletePost', elementPath: '(//a[text()="Delete post"])[1]' }),
  movedtoTrash: ({ elementName: 'movedtoTrash', elementPath: '//span[contains(text(),"Moved to trash")]' }),
  restore: ({ elementName: 'restore ', elementPath: '//button[contains(text(),"Restore")]' }),
  restored: ({ elementName: 'restored', elementPath: '//span[contains(text(),"Restored")]' }),
  deleteforever: ({ elementName: 'deleteforever', elementPath: '//button[contains(text(),"Delete forever")]' }),
  deleted: ({ elementName: 'deleted', elementPath: '//span[contains(text(),"Deleted")]' }),
  deletePostLinkInPostContextMenu: ({ elementName: 'deletePostLinkInPostContextMenu', elementPath: '//a/span[text()="Delete post"]' }),
  trashFeed: ({ elementName: 'trashFeed', elementPath: '//a[contains(text(),"Trash")]' }),
  mentions: ({ elementName: 'mentions', elementPath: '//a[contains(text(),"Mentions")]' }),
  deletePermanently: ({ elementName: 'deletePermanently', elementPath: '//span[contains(text(),"Delete permanently")]' }),
  restorePost: ({ elementName: 'restorePost', elementPath: '//span[contains(text(),"Restore post")]' }),
  starThisPost: ({ elementName: 'starThisPost', elementPath: '//a/span[text()="Star this post"]' }),
  starred: ({ elementName: 'starred', elementPath: '//a[contains(text(),"Starred")]' }),
  acknowledgmentCheckbox: ({ elementName: 'acknowledgmentCheckbox', elementPath: '(.//*[normalize-space(text()) and normalize-space(.)="Recipients must acknowledge to view the post (Beta)"])[1]/preceding::label[1]' }),
  signOutDropdown: ({ elementName: 'signOutDropdown', elementPath: '//a[@class="dropdown-toggle"]/i[@class="cnv-icons-14 icons2_Dropdown-c2c2c2-png" or @class="cnv-icons-16 icons2_Dropdown-c2c2c2-png"]' }),
  haveanAccount: ({ elementName: 'haveanAccount', elementPath: '//span[contains(text(),"Log in")]' }),
  copyLink: ({ elementName: 'copyLink', elementPath: '//li//span[contains(text(),"Copy link")]' }),
  checkBoxForAck: ({ elementName: 'checkBoxForAck', elementPath: '//input[@name="ackPostChkbox" and @class="cnv-checkbox ack-checkbox ng-pristine ng-untouched ng-valid ng-empty"]' }),
  editPostLink: ({ elementName: 'editPostLink', elementPath: '//a/span[text()="Edit post"]' }),
  muteNotifications: ({ elementName: 'muteNotifications', elementPath: '//a/span[text()="Mute notifications"]' }),
  crossButton: ({ elementName: 'crossButton', elementPath: '//button[@class="close view-close"]' }),
  inputField: ({ elementName: 'inputField', elementPath: '//input[@class="input ng-pristine ng-valid ng-empty ng-touched"]' }),
  suggestionList: ({ elementName: 'suggestionList', elementPath: '//li[@class="suggestion-item selected"]' }),
  invitationCross: ({ elementName: 'invitationCross', elementPath: '//span[@class="cross"]' }),
  bellIcon: ({ elementName: 'bellIcon', elementPath: '//span[@class="bell-hit-area"]' }),
  latestActivity: ({ elementName: 'latestActivity', elementPath: '//span[contains(text(),"Sort: Latest activity")]' }),
  latestActivityDropdown: ({ elementName: 'latestActivityDropdown', elementPath: '(//span[contains(text(),"Sort: Latest activity")]/../i)[1]' }),
  latestPost: ({ elementName: 'latestPost', elementPath: '//ul/li[contains(text(),"Latest post")]' }),
  postEditor: ({ elementName: 'postEditor', elementPath: '//div[@class="ql-editor" and @contenteditable="true"]' }),
  latestPostFilter: ({ elementName: 'latestPostFilter', elementPath: '//span[contains(text(),"Sort: Latest post")]' }),
  linkPostCommentInputField: ({ elementName: 'linkPostCommentInputField', elementPath: `//div[@class='ql-editor scroll-enabled']` }),
  commentSectionProgressbar: ({ elementName: 'commentSectionProgressbar', elementPath: `//div[contains(@class,'comments')]//div[@class='progress-bar']` }),
  displayedFileTextInGalleryView: ({ elementName: 'displayedFileTextInGalleryView', elementPath: `//div[@class='textLayer']/div` }),
  fullscreenIconInGalleryView: ({ elementName: 'fullscreenIconInGalleryView', elementPath: `//div[@class='row galleryHeaderContainer']//ul//li[@title='Full Screen']` }),
  fitToScreenButtonGalleryInGalleryView: ({ elementName: 'fitToScreenButtonGalleryInGalleryView', elementPath: `//button[contains(text(),'Fit to screen')]` }),
  galleryViewElipsesDeleteLink: ({ elementName: 'galleryViewElipsesDeleteLink', elementPath: `//li/a[contains(@ng-click, 'deleteFile')]` }),
  deleteButtonForFileInGalleryView: ({ elementName: 'deleteButtonForFileInGalleryView', elementPath: `//div[@class='modal-footer']/button[contains(text(),'Delete')]` }),
  galleryViewLikeButton: ({ elementName: 'galleryViewLikeButton', elementPath: `//div[@class='segment pull-right gallery-header']//ul/li/div[contains(text(),'Like')]` }),
  galleryViewUnlikeButton: ({ elementName: 'galleryViewUnlikeButton', elementPath: `//div[@class='segment pull-right gallery-header']//ul/li/div[contains(text(),'Unlike')]` }),
  galleryViewGoToPostIcon: ({ elementName: 'galleryViewGoToPostIcon', elementPath: `//a[@class='goto-post']/span` }),
  galleryViewNextButton: ({ elementName: 'galleryViewNextButton', elementPath: `//a[@title='Next']/span` }),
  galleryViewPreviousButton: ({ elementName: 'galleryViewPreviousButton', elementPath: `//a[@title='Previous']/span` }),
  galleryViewColorRectangleIcon: ({ elementName: 'galleryViewColorRectangleIcon', elementPath: `//div[@class='row galleryHeaderContainer']/ul/li[@class='color-picker dropdown dropdown-toggle']` }),
  galleryViewGreenColorForColorRectangle: ({ elementName: 'galleryViewGreenColorForColorRectangle', elementPath: `//ul[contains(@class, 'color-picker')]/li[@class='green']` }),
  galleryViewArrowIcon: ({ elementName: 'galleryViewArrowIcon', elementPath: `//li[@class='toolbox dropdown dropdown-toggle']/a[@title='Arrow']` }),
  galleryViewDownloadIcon: ({ elementName: 'galleryViewDownloadIcon', elementPath: `//li[@class='download']/a/span` }),
  videoPlaybackTime: ({ elementName: 'videoPlaybackTime', elementPath: `//div[@class='time']` }),
  galleryViewZoomIcon: ({ elementName: 'galleryViewZoomIcon', elementPath: `//div[@class='row galleryHeaderContainer']/ul//li/a[@title='Zoom']` }),
  galleryViewZoomPercentageInputField: ({ elementName: 'galleryViewZoomPercentageInputField', elementPath: `//span[@class='zoom-percent-container']/input` }),
  galleryViewZoomMetrics: ({ elementName: 'galleryViewZoomMetrics', elementPath: `//div[@class='panzoom']` }),
  deleteCommentLink: ({ elementName: 'deleteCommentLink', elementPath: `//a/span[text()="Delete"]` }),
  firstChatWindowCrossButton: ({ elementName: 'firstChatWindowCrossButton', elementPath: `//div[@class='btnClose']/i[contains(@class,'white')]` }),
  secondChatWindow: ({ elementName: 'secondChatWindow', elementPath: `//div[2]/div[@class='namesPopover']` }),
  galleryViewExitFullScreenIcon: ({ elementName: 'galleryViewExitFullScreenIcon', elementPath: `//a[@title='Exit fullscreen']` }),
  editCommentLink: ({ elementName: 'editCommentLink', elementPath: `//span[contains(text(),'Edit')]` }),
  copyCommentLink: ({ elementName: 'copyCommentLink', elementPath: `//span[contains(text(),'Copy comment link')]` }),
  feedSearchDropdownIcon: ({ elementName: 'feedSearchDropdownIcon', elementPath: `(//div[@class='dropdown-ico-wrapper']/i[@title='Show search options'])[1]` }),
  feedSearchFilters: ({ elementName: 'feedSearchFilters', elementPath: `//div[@class='bar-wrapper expand-bar-static' or @class='bar-wrapper expand-bar-static']` }),
  feedViewFeedItemsCount: ({ elementName: 'feedViewFeedItemsCount', elementPath: `//cnv-feed/div/cnv-feed-item` }),
  feedViewAttachedFilesCount: ({ elementName: 'feedViewAttachedFilesCount', elementPath: `//cnv-feed-item[@hasfiles='true']` }),
  feedViewAttachedAudioFilesCount: ({ elementName: 'feedViewAttachedAudioFilesCount', elementPath: `//cnv-feed-item[@hasfiles='true']//cnv-audio-player//audio` }),
  feedViewAttachedExcelFilesCount: ({ elementName: 'feedViewAttachedExcelFilesCount', elementPath: `//cnv-feed-item[@hasfiles='true']//i[contains(@class,'xls')]` }),
  feedViewAttachedImageFilesCount: ({ elementName: 'feedViewAttachedImageFilesCount', elementPath: `//cnv-feed-item[@hasfiles='true']//img[@class='feedReelImage']` }),
  feedViewAttachedPdfFilesCount: ({ elementName: 'feedViewAttachedPdfFilesCount', elementPath: `//cnv-feed-item[@hasfiles='true']//i[contains(@class,'pdf')]` }),
  feedViewAttachedPptFilesCount: ({ elementName: 'feedViewAttachedPptFilesCount', elementPath: `//cnv-feed-item[@hasfiles='true']//i[contains(@class,'ppt')]` }),
  feedViewAttachedVideoFilesCount: ({ elementName: 'feedViewAttachedVideoFilesCount', elementPath: `//cnv-feed-item[@hasfiles='true']//a/div//video` }),
  feedViewAttachedWordDocsFilesCount: ({ elementName: 'feedViewAttachedWordDocsFilesCount', elementPath: `//cnv-feed-item[@hasfiles='true']//i[contains(@class,'doc')]` }),
  feedViewChatItemsCount: ({ elementName: 'feedViewChatItemsCount', elementPath: `//cnv-feed-item//div/a[contains(text(),'Chat view details')]` }),
  feedViewLinkFeedItemsCount: ({ elementName: 'feedViewLinkFeedItemsCount', elementPath: `//cnv-feed-item//div[@class='link-feed-description']/span` }),
  feedViewMessageFeedItemsCount: ({ elementName: 'feedViewMessageFeedItemsCount', elementPath: `//div[@class='note']` }),
  firstPrivateGroup: ({ elementName: 'firstPrivateGroup', elementPath: `(//ul/li[contains(@bo-repeat, 'privateGroupsArray')]/div/a)[1]` }),
  secondPrivateGroup: ({ elementName: 'secondPrivateGroup', elementPath: `(//ul/li[contains(@bo-repeat, 'privateGroupsArray')]/div/a)[2]` }),
  feedFilterFromDropdown: ({ elementName: 'feedFilterFromDropdown', elementPath: `(//span[contains(text(),'From: Anyone')]/../i)[1]` }),
  feedFilterToDropdown: ({ elementName: 'feedFilterToDropdown', elementPath: `(//span[contains(text(),'To: Anyone')]/../i)[1]` }),
  statusNoFeedToDisplay: ({ elementName: 'statusNoFeedToDisplay', elementPath: `//div[@class='feed_load_status' and text()='There is no feed to display.']` }),
  activeChatExpandIconP2PChat: ({ elementName: 'activeChatExpandIconP2PChat', elementPath: `//a[@bo-mouseup='openChatInFullView()']` }),
  expandSettingsButton: ({ elementName: 'expandSettingsButton', elementPath: `//div[contains(@class,'expandSettingsBtn')]/i` }),
  chatListExpandIcon: ({ elementName: 'chatListExpandIcon', elementPath: `//div[contains(@class,'chatUserListHeader')]/a` }),
  p2pChatSettingsGearIcon: ({ elementName: 'p2pChatSettingsGearIcon', elementPath: `//cnv-dropdowns[@cnv-dropdown-ctrl='chatOptions']/span` }),
  p2pMuteChatSetting: ({ elementName: 'p2pMuteChatSetting', elementPath: `//span[text()='Mute chat']` }),
  p2pUnMuteChatSetting: ({ elementName: 'p2pUnMuteChatSetting', elementPath: `//span[text()='Unmute chat']` }),
  chatListSettingsGearIcon: ({ elementName: 'chatListSettingsGearIcon', elementPath: `//cnv-dropdowns[@cnv-dropdown-ctrl='chatSettingsOptions']/span/a` }),
  userStatusBusyLink: ({ elementName: 'userStatusBusyLink', elementPath: `//a/span[text()='Busy']` }),
  userStatusAvailableLink: ({ elementName: 'userStatusAvailableLink', elementPath: `//a/span[text()='Available']` }),
  userStatusBusy: ({ elementName: 'userStatusBusy', elementPath: `//div[@class='listUserStatusBusy']` }),
  userStatusAvailable: ({ elementName: 'userStatusAvailable', elementPath: `//div[@class='listUserStatusOnline']` }),
  p2pAddToChatIcon: ({ elementName: 'p2pAddToChatIcon', elementPath: `//div[@class='addToChat']/i[1]` }),
  secondChatWindowInputField: ({ elementName: 'secondChatWindowInputField', elementPath: `//div[@id='ql-editor-2']` }),
  groupChatFileInputField: ({ elementName: 'groupChatFileInputField', elementPath: `//div[@class='messageInputContainer']//input[@class='inputHide']` }),
  sharedGifImage: ({ elementName: 'sharedGifImage', elementPath: `//div/img[contains(@bo-if,'GIF')]` }),
  gifIconInChatWindow: ({ elementName: 'gifIconInChatWindow', elementPath: `//div[@class='giphy-action-container']//div[@class='attachmentButton giphy']` }),
  groupChatSettingsGearIcon: ({ elementName: 'groupChatSettingsGearIcon', elementPath: `//cnv-dropdowns[@cnv-dropdown-ctrl='chatOptions']/span` }),
  groupChatRenameDoneButton: ({ elementName: 'groupChatRenameDoneButton', elementPath: `//button[text()='Done']` }),
  renameGroup: ({ elementName: 'renameGroup', elementPath: `//a/span[text()='Rename group']` }),
  renameGroupChatInputField: ({ elementName: 'renameGroupChatInputField', elementPath: `//div[@bo-if='editChatTitle']/input` }),
  shareThisChat: ({ elementName: 'shareThisChat', elementPath: `//a/span[text()='Share this chat']` }),
  leaveChat: ({ elementName: 'leaveChat', elementPath: `//a/span[text()='Leave chat']` }),
  leaveChatYesButton: ({ elementName: 'leaveChatYesButton', elementPath: `//button[contains(text(),'Yes')]` }),
  chatLeftMessage: ({ elementName: 'chatLeftMessage', elementPath: `//div[@class='invite-left-msg']/span[contains(text(),'You have left this chat. ')]` }),
  createNewChatIcon: ({ elementName: 'createNewChatIcon', elementPath: `//div[@class='create-new-chat-btn']/i` }),
  signupNowLink: ({ elementName: 'signupNowLink', elementPath: `//*[@id="body"]/div/div[2]/div[5]/p[4]/a` }),
  signupEmailInputField: ({ elementName: 'signupEmailInputField', elementPath: `//*[@id="signup"]/div/div[2]/input` }),
  signupButton: ({ elementName: 'signupButton', elementPath: `//*[@id="signup"]/div/div[4]/button` }),
  yahooSigninButton: ({ elementName: 'yahooSigninButton', elementPath: `//span[text()='Sign in']` }),
  yahooUsernameInputField: ({ elementName: 'yahooUsernameInputField', elementPath: `//input[@id='login-username']` }),
  yahooSigninNextButton: ({ elementName: 'yahooSigninNextButton', elementPath: `//input[@id='login-signin']` }),
  yahooPasswordInputField: ({ elementName: 'yahooPasswordInputField', elementPath: `//input[@id='login-passwd']` }),
  yahooPasswordNextButton: ({ elementName: 'yahooPasswordNextButton', elementPath: `//button[@id='login-signin']` }),
  yahooHomeButton: ({ elementName: 'yahooHomeButton', elementPath: `//a/span[text()='Home']` }),
  verificationCodeInputField: ({ elementName: 'verificationCodeInputField', elementPath: `//*[@id="verificationCodeInput"]` }),
  verifyButton: ({ elementName: 'verifyButton', elementPath: `//*[@id="verificationCodeBtn"]` }),
  clickHereLinkToResendVerficationCodeEmail: ({ elementName: 'clickHereLinkToResendVerficationCodeEmail', elementPath: `//div[@id='emailVerification']//span[text()='click here']` }),
  signupFirstNameInputField: ({ elementName: 'signupFirstNameInputField', elementPath: `//input[@placeholder='First Name' and @style]` }),
  signupLastNameInputField: ({ elementName: 'signupLastNameInputField', elementPath: `//input[@placeholder='Last Name' and @style]` }),
  signupJobTitleInputField: ({ elementName: 'signupJobTitleInputField', elementPath: `//input[@placeholder='Job Title' and @style]` }),
  signupPasswordInputField: ({ elementName: 'signupPasswordInputField', elementPath: `//input[@type='password'and @style]` }),
  signupNextButton: ({ elementName: 'signupNextButton', elementPath: `//input[@placeholder='First Name' and @style]/../following-sibling::div/button` }),
  signupSkipThisForNowProfilePictureLink: ({ elementName: 'signupSkipThisForNowProfilePictureLink', elementPath: `//span[contains(@class,'skip-photo')]` }),
  signupSkipThisForNowGroupCreationLink: ({ elementName: 'signupSkipThisForNowGroupCreationLink', elementPath: `//div[@id='skipGroupCreation']/span` }),
  signupGetStartedLink: ({ elementName: 'signupGetStartedLink', elementPath: `//*[@id="inviteUsersSubModeWelcomeToNetwork"]/div[4]/div/div[1]/div[8]/span` }),
  signupCompletionScreenCrossIcon: ({ elementName: 'signupCompletionScreenCrossIcon', elementPath: `//div[@class='cross']/i` }),
  signupClickHereLink: ({ elementName: 'signupClickHereLink', elementPath: `//a[contains(text(),'Click here')]` }),
  signupConvoGettingStartedPlaylistPost: ({ elementName: 'signupConvoGettingStartedPlaylistPost', elementPath: `//div[@class='title-text']/a[contains(text(),'Convo Getting Started Playlist')]` }),
  signupPolicyAcceptButton: ({ elementName: 'signupPolicyAcceptButton', elementPath: `//button[contains(text(),'Accept')]` }),
  userMenuDropdown: ({ elementName: 'userMenuDropdown', elementPath: `//cnv-dropdowns[contains(@class,'user-menu-dropdown')]/span/a/i` }),
  userMenuSignoutLink: ({ elementName: 'userMenuSignoutLink', elementPath: `//span[text()='Sign Out']` }),
  loginButtonOnSignoutPage: ({ elementName: 'loginButtonOnSignoutPage', elementPath: `//div[@class='login-btn']/span` }),
  signupProfilePictureUploadInputField: ({ elementName: 'signupProfilePictureUploadInputField', elementPath: `//input[@class='chooseFile_SelectImage Orginal']` }),
  signupApplyPhotoButton: ({ elementName: 'signupApplyPhotoButton', elementPath: `//*[@id="photo-crop"]/div[2]/div[2]/button[2]` }),
  signupNextButtonAfterProfilePhotoUploaded: ({ elementName: 'signupNextButtonAfterProfilePhotoUploaded', elementPath: `//*[@id="uploadProfilePic"]/div[3]/div[2]/div/div[1]/div/button` }),
  signupGroupNameInputField: ({ elementName: 'signupGroupNameInputField', elementPath: `//*[@id="setupTeamView"]/div[3]/div[1]/div[2]/div[1]/input` }),
  signupCreateGroupButton: ({ elementName: 'signupCreateGroupButton', elementPath: `//*[@id="setupTeamView"]/div[3]/div[2]/button` }),
  signupStartUsingConvoButton: ({ elementName: 'signupStartUsingConvoButton', elementPath: `//div[@id='inviteUsersSubModeWelcomeToNetwork']//button[contains(text(),'Start Using Convo!')]` }),
  editProfileCancelButton: ({ elementName: 'editProfileCancelButton', elementPath: `//button[text()='Cancel']` }),
  signupPublicGroupLabel: ({ elementName: 'signupPublicGroupLabel', elementPath: `//label[@for='public']` }),
  signupInviteTeammatesFirstInputField: ({ elementName: 'signupInviteTeammatesFirstInputField', elementPath: `//*[@id="inviteUsersSubModeWelcomeToNetwork"]/div[4]/div/div[1]/div[1]/input` }),
  addGroupIcon: ({ elementName: 'addGroupIcon', elementPath: `//i[contains(@ng-click,'createGroup();')]` }),
  groupTypePrivateGroup: ({ elementName: 'groupTypePrivateGroup', elementPath: `//div[text()='Private']` }),
  groupCreationNextButton: ({ elementName: 'groupCreationNextButton', elementPath: `//button[text()='Next']` }),
  groupNameInputField: ({ elementName: 'groupNameInputField', elementPath: `//input[contains(@class,'group-name')]` }),
  createGroupButton: ({ elementName: 'createGroupButton', elementPath: `//button[text()='Create group']` }),
  elipsesInGroupView: ({ elementName: 'elipsesInGroupView', elementPath: `//cnv-dropdowns[contains(@cnv-dropdown-ctrl,'groupDropdown')]/span/a/i` }),
  groupSettingsInGroupViewElipsesMenu: ({ elementName: 'groupSettingsInGroupViewElipsesMenu', elementPath: `//a/span[text()='Group settings']` }),
  checkboxShareLocationWithPostContentAutomaticallyInGroupSettings: ({ elementName: 'checkboxShareLocationWithPostContentAutomaticallyInGroupSettings', elementPath: `//span[text()='Share location with post content automatically']/../label` }),
  saveChangesButtonInGroupSettings: ({ elementName: 'saveChangesButtonInGroupSettings', elementPath: `//button[text()='Save Changes']` }),
  settingsSavedSuccessMessage: ({ elementName: 'settingsSavedSuccessMessage', elementPath: `//span[text()='Your settings have been saved.']` }),
  geoLocationAddressInInlineInsert: ({ elementName: 'geoLocationAddressInInlineInsert', elementPath: `//p[@class='geo-location' and text()='at ']/span` }),
  geoLocationAddressInCreatedPost: ({ elementName: 'geoLocationAddressInCreatedPost', elementPath: `(//p[@class='geo-location']/span)[2]` }),
  listOfPrivateGroups: ({ elementName: 'listOfPrivateGroups', elementPath: `//li[contains(@bo-repeat,'group in privateGroupsArray')]/div/a` }),
  acknowledgePostCheckbox: ({ elementName: 'acknowledgePostCheckbox', elementPath: `//label[@for='ackPostChkbox']` }),
  crossIconForRecipientGroupInInlineInsert: ({ elementName: 'crossIconForRecipientGroupInInlineInsert', elementPath: `//a[contains(@class,'remove-button')]` }),
  geoLocationCrossIconInEditPost: ({ elementName: 'geoLocationCrossIconInEditPost', elementPath: `//div[contains(@class,'location-container-editor')]/div/i` }),
  disabledGeolocationIconInEditPost: ({ elementName: 'disabledGeolocationIconInEditPost', elementPath: `//div[@id='location-icon-editor' and contains(@class,'disabled')]` }),
  networkDropdown: ({ elementName: 'networkDropdown', elementPath: `//div[@class='network-logo-wrapper']/cnv-dropdowns[@class='hidden-xs header-dropdown']/span/a/i` }),
  networkSettingsLinkInNetworkDropdown: ({ elementName: 'networkSettingsLinkInNetworkDropdown', elementPath: `//span[contains(text(),'Network settings')]` }),
  feedAndSharingLink: ({ elementName: 'feedAndSharingLink', elementPath: `//a[contains(text(),'Feed and sharing')]` }),
  feedAndSharingToField: ({ elementName: 'feedAndSharingToField', elementPath: `(.//*[normalize-space(text()) and normalize-space(.)='To:'])[1]/following::a[1] ` }),
  feedAndSharingToInputField: ({ elementName: 'feedAndSharingToInputField', elementPath: `(.//*[normalize-space(text()) and normalize-space(.)='To:'])[1]/following::input[1]` }),
  postContextMenuShareWithOthersLink: ({ elementName: 'postContextMenuShareWithOthersLink', elementPath: `//span[contains(text(),'Share with others')]` }),
  shareWithOthersInputField2: ({ elementName: 'shareWithOthersInputField2', elementPath: `(.//*[normalize-space(text()) and normalize-space(.)='+Add more'])[1]/following::input[1]` }),
  updatingSharingInfoSuccessMessage: ({ elementName: 'updatingSharingInfoSuccessMessage', elementPath: `//span[text()='Updating sharing info']` }),
  invitePeopleToThisGroupInGroupViewElipsesMenu: ({ elementName: 'invitePeopleToThisGroupInGroupViewElipsesMenu', elementPath: `//a/span[text()='Invite people to this group']` }),
  inviteTeammatesSearchPlaceholderLink: ({ elementName: 'inviteTeammatesSearchPlaceholderLink', elementPath: `//a[text()='Search']` }),
  inviteTeammatesSearchInputField: ({ elementName: 'inviteTeammatesSearchInputField', elementPath: `//a[text()='Search']/following-sibling::input` }),
  inviteButton: ({ elementName: 'inviteButton', elementPath: `//div/button[text()='Invite']` }),
  invitationSentMessage: ({ elementName: 'invitationSentMessage', elementPath: `//div[text()='Invitation sent!']` }),
  invitationSentMessageCrossIcon: ({ elementName: 'invitationSentMessageCrossIcon', elementPath: `//div[text()='Invitation sent!']/../../span` }),
  cancelButton: ({ elementName: 'cancelButton', elementPath: `//button[text()='Cancel']` }),
  groupEmail: ({ elementName: 'groupEmail', elementPath: `//span[text()='Group email']/following-sibling::a` }),
  composeButtonYahooMail: ({ elementName: 'composeButtonYahooMail', elementPath: `//a[text()='Compose']` }),
  messageToFieldYahooMail: ({ elementName: 'messageToFieldYahooMail', elementPath: `//input[@id='message-to-field']` }),
  messageSubjectFieldYahooMail: ({ elementName: 'messageSubjectFieldYahooMail', elementPath: `//input[@data-test-id='compose-subject']` }),
  messageBodyFieldYahooMail: ({ elementName: 'messageBodyFieldYahooMail', elementPath: `//div[@data-test-id='rte']` }),
  sendButtonYahooEmail: ({ elementName: 'sendButtonYahooEmail', elementPath: `//button/span[text()='Send']` }),
  messageSentSuccessMessageYahooMail: ({ elementName: 'messageSentSuccessMessageYahooMail', elementPath: `//span[contains(text(),'Your')]/a/..` }),
  locationIconInInlineInsert: ({ elementName: 'locationIconInInlineInsert', elementPath: `//cnv-insert-add-item-options/div[@id='location-icon']` }),
  locationIconInEditPost: ({ elementName: 'locationIconInEditPost', elementPath: `//div[@id='location-icon-editor']` }),
  geoLocationAddressInPostEditView: ({ elementName: 'geoLocationAddressInPostEditView', elementPath: `//p[@class='geo-location' and text()='at ']/span` }),
  everyoneGroupCrossIcon: ({ elementName: 'everyoneGroupCrossIcon', elementPath: `//span[text()='Everyone']/..//div` }),
  postInFeedView: ({ elementName: 'postInFeedView', elementPath: `//div[@class='note']` }),
  feedBody: ({ elementName: 'feedBody', elementPath: `//div[@id='home-center-panel']` }),
  newPostsBanner: ({ elementName: 'newPostsBanner', elementPath: `//div[@id='feed-updates-available-notif']/div/span` }),
  editedNowTimestampForPost: ({ elementName: 'editedNowTimestampForPost', elementPath: `//span[@class='nowrap']//a[text()='edited']/..//a[text()='now']` }),
  postTextInPostDetailsView: ({ elementName: 'postTextInPostDetailsView', elementPath: `//div[@class='ql-editor']/div` }),
  canEditAndCommentLinkInPostDetailView: ({ elementName: 'canEditAndCommentLinkInPostDetailView', elementPath: `//li[@class='more-options']//a/span[text()='Can edit and comment']` }),
  canEditAndCommentLinkInPostDetailViewSelected: ({ elementName: 'canEditAndCommentLinkInPostDetailViewSelected', elementPath: `//li[@class='more-options']//a/span[text()='Can edit and comment']/../i[contains(@class,'icon-cnv-tick-white')]` }),
  commentOnlyLinkInPostDetailView: ({ elementName: 'commentOnlyLinkInPostDetailView', elementPath: `//li[@class='more-options']//a/span[text()='Comment only']` }),
  thisPostIsClosedForEditingText: ({ elementName: 'thisPostIsClosedForEditingText', elementPath: `//div/span[text()='This post is closed for editing.']` }),
  viewOnlyLinkInPostDetailView: ({ elementName: 'viewOnlyLinkInPostDetailView', elementPath: `//li[@class='more-options']//a/span[text()='View only']` }),
  commentsAreClosedForThisPostText: ({ elementName: 'commentsAreClosedForThisPostText', elementPath: `//div/div/cnv-comment-editor//span[contains(text(),'Comments are closed for this post')]` }),
  teamDirectory: ({ elementName: 'teamDirectory', elementPath: `//a/span[text()='Team directory']` }),
  everyoneGroupNameHeadingInTeamDirectory: ({ elementName: 'everyoneGroupNameHeadingInTeamDirectory', elementPath: `//div/a[contains(text(),'Everyone (')]` }),
  manageUsersLinkInNetworkSettings: ({ elementName: 'manageUsersLinkInNetworkSettings', elementPath: `//li/a[text()='Manage users']` }),
  limitNetworkUsersInputField: ({ elementName: 'limitNetworkUsersInputField', elementPath: `//input[@id='networkCapLimit']` }),
  settingsSavedSuccessMessageInNetworkSettings: ({ elementName: 'settingsSavedSuccessMessageInNetworkSettings', elementPath: `//span[text()='Settings Saved']` }),
  inviteTeammatesInputFieldInTeamDirectory: ({ elementName: 'inviteTeammatesInputFieldInTeamDirectory', elementPath: `//div[@class='inv-teammates']/input` }),
  userCapLimitReachedMessage: ({ elementName: 'userCapLimitReachedMessage', elementPath: `//span[contains(text(),'reached the user cap')]` }),
  applyNetworkCapButton: ({ elementName: 'applyNetworkCapButton', elementPath: `//button[text()='Apply network cap']` }),
  networkNameInputField: ({ elementName: 'networkNameInputField', elementPath: `//input[@id='networkName']` }),
  networkInformationHeading: ({ elementName: 'networkInformationHeading', elementPath: `//div[@class='header' and text()='Network information']` }),
  settingsSavedSuccessMessageInNetworkInformation: ({ elementName: 'settingsSavedSuccessMessageInNetworkInformation', elementPath: `//span[text()='Your settings have been saved']` }),
  networkImageUploadInputField: ({ elementName: 'networkImageUploadInputField', elementPath: `//input[@id='networkImageUpload']` }),
  networkImageUploadSpinner: ({ elementName: 'networkImageUploadSpinner', elementPath: `//span[@class='cnv-spinner light']` }),
  networkImageURL: ({ elementName: 'networkImageURL', elementPath: `//div/img[@bo-src='accountImageUrl']` }),
  setUserPrivileges: ({ elementName: 'setUserPrivileges', elementPath: `//li[text()='Set user privileges']` }),
  blockUsersInputField: ({ elementName: 'blockUsersInputField', elementPath: `//input[@placeholder='Add email, domain or phone number']` }),
  blockButtonInNetworkSettings: ({ elementName: 'blockButtonInNetworkSettings', elementPath: `//button[text()='Block']` }),
  firstPrivateGroupInGroupsList: ({ elementName: 'firstPrivateGroupInGroupsList', elementPath: `(//i[contains(@class,'privateGroup')]/following-sibling::a)[1]` }),
  inviteButtonInGroupView: ({ elementName: 'inviteButtonInGroupView', elementPath: `//form/button[text()='Invite']` }),
  inviteBlockedMessage: ({ elementName: 'inviteBlockedMessage', elementPath: `//span[contains(text(),'is blocked. Contact your network admin to invite blocked users.')]` }),
  inviteBlockedMessageCrossIcon: ({ elementName: 'inviteBlockedMessageCrossIcon', elementPath: `//span[contains(text(),'is blocked. Contact your network admin to invite blocked users.')]/../span/i` }),
  settingsSavedSuccessMessageInUserPrivileges: ({ elementName: 'settingsSavedSuccessMessageInUserPrivileges', elementPath: `//span[text()='Settings saved']` }),
  enterAdminModeLink: ({ elementName: 'enterAdminModeLink', elementPath: `//span[text()='Enter admin mode']` }),
  closeGallery: ({ elementName: 'closeGallery', elementPath: `//a[@title='Close Gallery']` }),
  notificationPreferences: ({ elementName: 'notificationPreferences', elementPath: `//span[text()='Notification preferences']` }),
  myAccountLink: ({ elementName: 'myAccountLink', elementPath: `//a[contains(text(),'My account')]` }),
  newLoginEmailInputField: ({ elementName: 'newLoginEmailInputField', elementPath: `//input[@id='newEmail']` }),
  changeEmailButton: ({ elementName: 'changeEmailButton', elementPath: `//button[@id='emailBtn']` }),
  emailAddressUpdatedSuccessMessage: ({ elementName: 'emailAddressUpdatedSuccessMessage', elementPath: `//span[text()='Email address updated.']` }),
  currentPasswordInputField: ({ elementName: 'currentPasswordInputField', elementPath: `//input[@id='curPass']` }),
  newPasswordInputField: ({ elementName: 'newPasswordInputField', elementPath: `//input[@id='newPass']` }),
  passwordUpdatedSuccessMessage: ({ elementName: 'passwordUpdatedSuccessMessage', elementPath: `//span[text()='Password updated.']` }),
  changePasswordButton: ({ elementName: 'changePasswordButton', elementPath: `//button[normalize-space()='Change password' and contains(@class,'disabled') = 0]` }),
  signOutAllOtherSessions: ({ elementName: 'signOutAllOtherSessions', elementPath: `//button[text()='Sign out all other sessions']` }),
  welcomeTitleForNewNetwork: ({ elementName: 'welcomeTitleForNewNetwork', elementPath: `//div[contains(@class,'title') and contains(text(),'Welcome to the')]` }),
  clickHereToResendLink: ({ elementName: 'clickHereToResendLink', elementPath: `//div[@id='emailVerification']//a` }),
  disableMyAccountLink: ({ elementName: 'disableMyAccountLink', elementPath: `//a[text()='Disable my account']` }),
  disableAccountButton: ({ elementName: 'disableAccountButton', elementPath: `//button[text()='Disable Account']` }),
  verificationCodeSentSuccessMessage: ({ elementName: 'verificationCodeSentSuccessMessage', elementPath: `//div[@class='verificationEmailSuccessful']` }),
  upgradeNowButton: ({ elementName: 'upgradeNowButton', elementPath: `//a[text()='Upgrade Now']/../../..//i` }),
  postPermissionOptionsDropdown: ({ elementName: 'postPermissionOptionsDropdown', elementPath: `//div[@class='post-permission-options']//i` }),
  canEditAndCommentsLinkInInlineInsertDropdown: ({ elementName: 'canEditAndCommentsLinkInInlineInsertDropdown', elementPath: `//a/span[text()='Can edit and comments']` }),
  commentOnlyLinkInInlineInsertDropdown: ({ elementName: 'commentOnlyLinkInInlineInsertDropdown', elementPath: `//a/span[text()='Comment only']` }),
  viewOnlyLinkInInlineInsertDropdown: ({ elementName: 'viewOnlyLinkInInlineInsertDropdown', elementPath: `//a/span[text()='View only']` }),
  canEditAndCommentsPermissionSelected: ({ elementName: 'canEditAndCommentsPermissionSelected', elementPath: `//a/span[text()='Can edit and comments']/../i` }),
  commentOnlyPermissionSelected: ({ elementName: 'commentOnlyPermissionSelected', elementPath: `//a/span[text()='Comment only']/../i` }),
  viewOnlyPermissionSelected: ({ elementName: 'viewOnlyPermissionSelected', elementPath: `//a/span[text()='View only']/../i` }),
  enableSharingLinkInInlineInsertDropdown: ({ elementName: 'enableSharingLinkInInlineInsertDropdown', elementPath: `//a/span[text()='Enable Sharing']` }),
  enableSharingPermissionSelected: ({ elementName: 'enableSharingPermissionSelected', elementPath: `//a/span[text()='Enable Sharing']/../i` }),
  commentEditorAreaInPostDetailView: ({ elementName: 'commentEditorAreaInPostDetailView', elementPath: `//div[@class='row comment-editor-container']//div[text()='Add a comment...']` }),
  shareWithOthersInputLink: ({ elementName: 'shareWithOthersInputLink', elementPath: `//div[@class='tags']` }),
  shareWithOthersInputField: ({ elementName: 'shareWithOthersInputField', elementPath: `//div[@class='tags']/input` }),
  postRecipientFieldInEditPostView: ({ elementName: 'postRecipientFieldInEditPostView', elementPath: `//span[@id='tags-container']/tags-input/div/div/div` }),
  enableSharingLinkUnderPermissionsMenuInPostDetailedView: ({ elementName: 'enableSharingLinkUnderPermissionsMenuInPostDetailedView', elementPath: `//a/span[text()='Enable sharing']` }),
  commentSectionDisabledFurtherSharingMessage: ({ elementName: 'commentSectionDisabledFurtherSharingMessage', elementPath: `//span[contains(text(),'Post creator has disabled further sharing')]` }),
  editPostSectionDisabledFurtherSharingMessage: ({ elementName: 'editPostSectionDisabledFurtherSharingMessage', elementPath: `//span[contains(@class, 'tags-meta-right sharing-disabled-label')]` }),
  groupNameHeading: ({ elementName: 'groupNameHeading', elementPath: `//span[@id='feed_title']/strong/span` }),
  inviteToGroupInputLink: ({ elementName: 'inviteToGroupInputLink', elementPath: `//form[@name='inviteUserToGroup']//div[@class='tags']` }),
  inviteToGroupInputField: ({ elementName: 'inviteToGroupInputField', elementPath: `//form[@name='inviteUserToGroup']//div[@class='tags focused']/input` }),
  inviteToGroupInvitationSuccessMessage: ({ elementName: 'inviteToGroupInvitationSuccessMessage', elementPath: `//span[contains(text(),'Your invitation has been sent to')]` }),
  inviteToGroupInvitationSuccessMessageCrossIcon: ({ elementName: 'inviteToGroupInvitationSuccessMessageCrossIcon', elementPath: `//span[contains(text(),'Your invitation has been sent to')]/../span/i` }),
  inviteToGroupAlreadyMemberOfThisGroupMessage: ({ elementName: 'inviteToGroupAlreadyMemberOfThisGroupMessage', elementPath: `//span[contains(text(),'is already a member of this group.')]` }),
  inviteToGroupAlreadyMemberOfThisGroupMessageCrossIcon: ({ elementName: 'inviteToGroupAlreadyMemberOfThisGroupMessageCrossIcon', elementPath: `//span[contains(text(),'is already a member of this group.')]/../span/i` }),
  inviteToGroupTeammateSuggestion: ({ elementName: 'inviteToGroupTeammateSuggestion', elementPath: `//li[@class='suggestion-item selected']` }),
  inviteToGroupTeammateSuggestionDuringGroupCreation: ({ elementName: 'inviteToGroupTeammateSuggestionDuringGroupCreation', elementPath: `//ul/li[@class='suggestion-item']` }),
  inviteTeammatesToGroupInputLinkDuringGroupCreation: ({ elementName: 'inviteTeammatesToGroupInputLinkDuringGroupCreation', elementPath: `//form[@name='invitePeople']//div[@class='tags']` }),
  inviteTeammatesToGroupInputFieldDuringGroupCreation: ({ elementName: 'inviteTeammatesToGroupInputFieldDuringGroupCreation', elementPath: `//form[@name='invitePeople']//div[@class='tags']/input` }),
  crossIconOninvitationSentModalForInviteUsersInGroup: ({ elementName: 'crossIconOninvitationSentModalForInviteUsersInGroup', elementPath: `//span[@class='cross']` }),
  enterAdminMode: ({ elementName: 'enterAdminMode', elementPath: `//span[contains(text(),'Enter admin mode')]` }),
  exitAdminMode: ({ elementName: 'exitAdminMode', elementPath: `//div[contains(text(),'Exit admin mode')]` }),
  groupsDirectory: ({ elementName: 'groupsDirectory', elementPath: `//span/a[contains(text(),'Groups Directory')]` }),
  searchForGroups: ({ elementName: 'searchForGroups', elementPath: `//input[@placeholder='Search for groups']` }),
  receipientsMustAckLabel: ({ elementName: 'receipientsMustAckLabel', elementPath: `//span[contains(text(),'Recipients must acknowledge to view the post')]` }),
  publishPost: ({ elementName: 'publishPost', elementPath: `(//button[contains(text(),"Publish")])[1]` }),
  customizeUserProfilesTab: ({ elementName: 'customizeUserProfilesTab', elementPath: `//li[text()='Customize user profiles']` }),
  customProfilesInfoText: ({ elementName: 'customProfilesInfoText', elementPath: `//div[@class='info-text' and contains(text(),'Hover over the fields and click Lock icon')]` }),
  firstNameLockedField: ({ elementName: 'firstNameLockedField', elementPath: `//div[contains(@class,'permanent')]//input[@name='First name' and @readonly='readOnly']` }),
  lastNameLockedField: ({ elementName: 'lastNameLockedField', elementPath: `//div[contains(@class,'permanent')]//input[@name='Last name' and @readonly='readOnly']` }),
  positionLockedField: ({ elementName: 'positionLockedField', elementPath: `//div[contains(@class,'permanent')]//input[@name='Position' and @readonly='readOnly']` }),
  shortBioLockedField: ({ elementName: 'shortBioLockedField', elementPath: `//div[contains(@class,'permanent')]//input[@name='Short bio' and @readonly='readOnly']` }),
  locationLockedField: ({ elementName: 'locationLockedField', elementPath: `//div[contains(@class,'permanent')]//input[@name='Location' and @readonly='readOnly']` }),
  phoneLockedField: ({ elementName: 'phoneLockedField', elementPath: `//div[contains(@class,'permanent')]//input[@name='Phone' and @readonly='readOnly']` }),
  linkedInLockedField: ({ elementName: 'linkedInLockedField', elementPath: `//div[contains(@class,'permanent')]//input[@name='LinkedIn' and @readonly='readOnly']` }),
  twitterLockedField: ({ elementName: 'twitterLockedField', elementPath: `//div[contains(@class,'permanent')]//input[@name='Twitter' and @readonly='readOnly']` }),
  customFieldsInputField: ({ elementName: 'customFieldsInputField', elementPath: `//input[contains(@class,'ng-empty') and @placeholder='Enter field name']` }),
  fieldNameShortErrorMessage: ({ elementName: 'fieldNameShortErrorMessage', elementPath: `//span[text()='FIELD NAME TOO SHORT']` }),
  fieldNameLongErrorMessage: ({ elementName: 'fieldNameLongErrorMessage', elementPath: `//span[text()='FIELD NAME TOO LONG']` }),
  customFieldsAddButton: ({ elementName: 'customFieldsAddButton', elementPath: `//div[@class='form-group half']//input[contains(@class,'ng-touched')]/../../i[@class='action-btn add']` }),
  fieldNameAlreadyExistsErrorMessage: ({ elementName: 'fieldNameAlreadyExistsErrorMessage', elementPath: `//span[text()='FIELD NAME ALREADY EXISTS!']` }),
  customFieldsInputFieldWithErrorMessage: ({ elementName: 'customFieldsInputFieldWithErrorMessage', elementPath: `//div[@class='form-group half has-error']//input` }),
  additionalInfoTab: ({ elementName: 'additionalInfoTab', elementPath: `//form[@name='updateDetails']//li[text()='Additional Info']` }),
  manageContentLinkInNetworkSettings: ({ elementName: 'manageContentLinkInNetworkSettings', elementPath: `//li/a[text()='Manage content']` }),
  contentPreferencesTab: ({ elementName: 'contentPreferencesTab', elementPath: `//li[text()='Content preferences']` }),
  manageAcknowledgePostCreatorsHeading: ({ elementName: 'manageAcknowledgePostCreatorsHeading', elementPath: `//div[@class='manage-ack-post-creators-div']//h4[text()='Manage Acknowledgement Post Creators']` }),
  allowOnlySpecificMembersCheckbox: ({ elementName: 'allowOnlySpecificMembersCheckbox', elementPath: `//div[@class='manage-ack-post-creators-div']//span[text()='Allow only specific members to create acknowledgement type posts']/..//label` }),
  acknowledgePostCreatorAddButton: ({ elementName: 'acknowledgePostCreatorAddButton', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList']//li[@id='groupHeader']//span[contains(@class,'header-img add')]` }),
  acknowledgePostCreatorInputField: ({ elementName: 'acknowledgePostCreatorInputField', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList']//input[contains(@class,'add-members-search-field')]` }),
  removeUsersButtonInManageAcknowledgementPostCreators: ({ elementName: 'removeUsersButtonInManageAcknowledgementPostCreators', elementPath: `//div[@class='manage-ack-post-creators-div']//div[@id='removeUsersBtn' or text()='Remove Users']` }),
  acknowledgePostCreatorsHeadingDisabled: ({ elementName: 'acknowledgePostCreatorsHeadingDisabled', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[contains(@class,'disableInteraction')]//span[text()='Acknowledgement Post Creators']` }),
  acknowledgePostCreatorsUsersListDisabled: ({ elementName: 'acknowledgePostCreatorsUsersListDisabled', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList disableInteraction']` }),
  acknowledgePostCreatorsHeading: ({ elementName: 'acknowledgePostCreatorsHeading', elementPath: `//div[@class='manage-ack-post-creators-div']//span[text()='Acknowledgement Post Creators']` }),
  acknowledgePostCreatorsUserNameField: ({ elementName: 'acknowledgePostCreatorsUserNameField', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList']//li[@id='groupHeader']//span[text()='Username']` }),
  acknowledgePostCreatorsPositionField: ({ elementName: 'acknowledgePostCreatorsPositionField', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList']//li[@id='groupHeader']//span[text()='Position']` }),
  acknowledgePostCreatorsEmailField: ({ elementName: 'acknowledgePostCreatorsEmailField', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList']//li[@id='groupHeader']//span[text()='Email']` }),
  acknowledgePostCreatorsPhoneNoField: ({ elementName: 'acknowledgePostCreatorsPhoneNoField', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList']//li[@id='groupHeader']//span[text()='Phone No.']` }),
  acknowledgePostCreatorsSearchListInputField: ({ elementName: 'acknowledgePostCreatorsSearchListInputField', elementPath: `//div[@class='manage-ack-post-creators-div']//input[@id='searchUser']` }),
  trendingHeading: ({ elementName: 'trendingHeading', elementPath: `//div[@class='trending-tags-section']//p[text()='TRENDING:']` }),
  trendingHashtagFilterDropdown: ({ elementName: 'trendingHashtagFilterDropdown', elementPath: `//div[@class='trending-tags-section']//div[@class='trending-filter-container']//i[contains(@class,'lightgray')]` }),
  trendingHashtagFilterThisMonth: ({ elementName: 'trendingHashtagFilterThisMonth', elementPath: `//div[@class='trending-tags-section']//ul[@class='trending-filter-lists']//li[text()='This month']` }),
  trendingHashtagFilterThisWeek: ({ elementName: 'trendingHashtagFilterThisWeek', elementPath: `//div[@class='trending-tags-section']//ul[@class='trending-filter-lists']//li[text()='This week']` }),
  trendingHashtagFilterToday: ({ elementName: 'trendingHashtagFilterToday', elementPath: `//div[@class='trending-tags-section']//ul[@class='trending-filter-lists']//li[text()='Today']` }),
  firstTrendingHashtagName: ({ elementName: 'firstTrendingHashtagName', elementPath: `(//div[@class='tag-info']/p)[1]` }),
  firstTrendingHashtagPostsCount: ({ elementName: 'firstTrendingHashtagPostsCount', elementPath: `(//div[@class='tag-info']/p)[1]/../p[@class='tag-posts-number']` }),
  manageGroupsLinkInNetworkSettings: ({ elementName: 'manageGroupsLinkInNetworkSettings', elementPath: `//li/a[text()='Manage Groups']` }),
  allowOnlySpecificMembersToCreateGroupsCheckbox: ({ elementName: 'allowOnlySpecificMembersToCreateGroupsCheckbox', elementPath: `//div[@class='settings-manage-groups-wrapper']//span[text()='Allow only specific members to create groups']/..//label` }),
  groupsHeading: ({ elementName: 'groupsHeading', elementPath: `//div[@class='heading']//span[text()='Groups']` }),
  groupCreatorsAddButton: ({ elementName: 'groupCreatorsAddButton', elementPath: `//div[@class='settings-manage-groups-wrapper']//ul[@class='usersList']//li[@id='groupHeader']//span[contains(@class,'header-img add')]` }),
  groupCreatorsInputField: ({ elementName: 'groupCreatorsInputField', elementPath: `//div[@class='settings-manage-groups-wrapper']//ul[@class='usersList']//input[contains(@class,'add-members-search-field')]` }),
  removeUsersButtonInManageGroups: ({ elementName: 'removeUsersButtonInManageGroups', elementPath: `//div[@class='settings-manage-groups-wrapper']//div[@id='removeUsersBtn' or text()='Remove Users']` }),
  teamDirectorySearchForPeopleInputField: ({ elementName: 'teamDirectorySearchForPeopleInputField', elementPath: `//input[@placeholder='Search for people']` }),
  removeFromNetwork: ({ elementName: 'removeFromNetwork', elementPath: `//span[text()='Remove from network']` }),
  leaveNetworkButton: ({ elementName: 'leaveNetworkButton', elementPath: `//button[text()='Leave Network']` }),
  shareWithOthers: ({ elementName: 'shareWithOthers', elementPath: `//span[contains(text(),'Share with others')]` }),
  unblockButton: ({ elementName: 'unblockButton', elementPath: `//span[contains(text(),'Unblock')]` }),
  groupMembers: ({ elementName: 'groupMembers', elementPath: `//a[contains(text(),'Member')]` }),
  disabledUsersList: ({ elementName: 'disabledUsersList', elementPath: `//ul[@class='usersList disableInteraction']` }),
  chatClose: ({ elementName: 'chatClose', elementPath: `//div[2]/div[@class='namesPopover']` }),
  typeSomethingHere: ({ elementName: 'typeSomethingHere', elementPath: `//div[@class='cnv-onboarding-add-comment-tooltip']//span[text()='Type something here']` }),
  selectingSomeText: ({ elementName: 'selectingSomeText', elementPath: `//div[@class='comment_txt']//mark[text()="selecting some text"]` }),
  commentOnThis: ({ elementName: 'commentOnThis', elementPath: `//div[contains(@class,'sel-open-comments')]//span[text()='Comment on this']` }),
  typeGotIt: ({ elementName: 'typeGotIt', elementPath: `//div[@class='cnv-onboarding-add-comment-tooltip annotation']//span[text()='Type "got it" to finish your reply']` }),
  taskCompletion1Percent: ({ elementName: 'taskCompletion1Percent', elementPath: `//div[@class='cnv-progress-bar']//div[@class='green']/../span[@class='count' and text()='1%']` }),
  learnaboutfeedStriked: ({ elementName: 'learnaboutfeedStriked', elementPath: `//div[@id='homeAppCont']//div[@class='checklist-wrapper']//ul[@class='onboarding-checklist']//a[normalize-space()='1. Learn about feed' and @class='strike-through']` }),
  learAboutFeedChecked: ({ elementName: 'learAboutFeedChecked', elementPath: `//div[@id='homeAppCont']//div[@class='checklist-wrapper']//ul[@class='onboarding-checklist']//a[normalize-space()='1. Learn about feed' and @class='strike-through']//i[contains(@class,'glyphicon-ok')]` }),
  createAGroup: ({ elementName: 'createAGroup', elementPath: `//div[@id='homeAppCont']//div[@class='checklist-wrapper']//ul[@class='onboarding-checklist']//a[normalize-space()='2. Create a group']` }),
  createaNewGroupButton: ({ elementName: 'createaNewGroupButton', elementPath: `//div[contains(@class,'onboardingToolTips')]//a[text()='Create a new group']` }),
  createaGroupStriked: ({ elementName: 'createaGroupStriked', elementPath: `//div[@id='homeAppCont']//div[@class='checklist-wrapper']//ul[@class='onboarding-checklist']//a[normalize-space()='2. Create a group' and @class='strike-through']` }),
  createaGroupChecked: ({ elementName: 'createaGroupChecked', elementPath: `//div[@id='homeAppCont']//div[@class='checklist-wrapper']//ul[@class='onboarding-checklist']//a[normalize-space()='2. Create a group' and @class='strike-through']//i[contains(@class,'glyphicon-ok')]` }),
  taskCompletion40Percent: ({ elementName: 'taskCompletion40Percent', elementPath: `//div[@class='cnv-progress-bar']//div[@class='green']/../span[@class='count' and text()='40%']` }),
  taskCompletion20Percent: ({ elementName: 'taskCompletion20Percent', elementPath: `//div[@class='cnv-progress-bar']//div[@class='green']/../span[@class='count' and text()='20%']` }),
  shareaPost: ({ elementName: 'shareaPost', elementPath: `//div[@id='homeAppCont']//div[@class='checklist-wrapper']//ul[@class='onboarding-checklist']//a[normalize-space()='3. Share a post']` }),
  letsDoThisButton: ({ elementName: 'letsDoThisButton', elementPath: `//div[contains(@class,'onboardingToolTips')]//a[text()="Let's do this!"]` }),
  shareThisPost: ({ elementName: 'shareThisPost', elementPath: `//button[text()='Share this post']` }),
  gettingStarted: ({ elementName: 'gettingStarted', elementPath: `//cnv-feed-item//a[text()='#GettingStarted']` }),
  shareaPostStriked: ({ elementName: 'shareaPostStriked', elementPath: `//div[@id='homeAppCont']//div[@class='checklist-wrapper']//ul[@class='onboarding-checklist']//a[normalize-space()='3. Share a post' and @class='strike-through']` }),
  shareaPostChecked: ({ elementName: 'shareaPostChecked', elementPath: `//div[@id='homeAppCont']//div[@class='checklist-wrapper']//ul[@class='onboarding-checklist']//a[normalize-space()='3. Share a post' and @class='strike-through']//i[contains(@class,'glyphicon-ok')]` }),
  taskCompletion60Percent: ({ elementName: 'taskCompletion60Percent', elementPath: `//div[@class='cnv-progress-bar']//div[@class='green']/../span[@class='count' and text()='60%']` }),
  addProfilePhotoButton: ({ elementName: 'addProfilePhotoButton', elementPath: `//cnv-onboarding-tooltips//a[text()='Add a profile photo']` }),
  navBarProfileImage: ({ elementName: 'navBarProfileImage', elementPath: `//div[@class='row no-margin header-bar-container']//cnv-user-profile-image//img` }),
  setUpanIntegrationButton: ({ elementName: 'setUpanIntegrationButton', elementPath: `//div[contains(@class,'onboardingToolTips')]//a[text()="Set up an integration"]` }),
  manageIntegrations: ({ elementName: 'manageIntegrations', elementPath: `//span[contains(text(),'Manage integrations')]` }),
  allIntegrations: ({ elementName: 'allIntegrations', elementPath: `//a[contains(text(),'All Integrations')]` }),
  twitterIntegrations: ({ elementName: 'twitterIntegrations', elementPath: `//h3[contains(text(),'Twitter Integration')]` }),
  change: ({ elementName: 'change', elementPath: `//a[contains(text(),'change')]` }),
  connectToTwiiterAccount: ({ elementName: 'connectToTwiiterAccount', elementPath: `//button[contains(text(),'Connect to Twitter account')]` }),
  twitterUserName: ({ elementName: 'twitterUserName', elementPath: `//input[@id='username_or_email']` }),
  twitterPassword: ({ elementName: 'twitterPassword', elementPath: `//input[@id='password']` }),
  authorizeApp: ({ elementName: 'authorizeApp', elementPath: `//input[@value='Authorize app' or @value='Authorise app']` }),
  labelGetTweets: ({ elementName: 'labelGetTweets', elementPath: `//span[text()='Get tweets by this user']/../label` }),
  getTweets: ({ elementName: 'getTweets', elementPath: `//input[@name='twitter_handles']` }),
  addNewGroup: ({ elementName: 'addNewGroup', elementPath: `//div[@class='add-webhook-integration add-twitter-integration']//div/a[contains(text(),'create a new group')]` }),
  privateGroupIntegration: ({ elementName: 'privateGroupIntegration', elementPath: `//div[@class='group-create-type']//div/div/div[contains(text(),'Private')]` }),
  nextButtonIntegration: ({ elementName: 'nextButtonIntegration', elementPath: `//button[contains(text(),'Next')]` }),
  groupName: ({ elementName: 'groupName', elementPath: `//div[@class='form-group']/input[@placeholder='e.g Marketing']` }),
  createGroupNextButton: ({ elementName: 'createGroupNextButton', elementPath: `//*[@id="crtGrpNxtBtn"]` }),
  createPrivateGroup: ({ elementName: 'createPrivateGroup', elementPath: `//button[contains(text(),'Create group')]` }),
  integrationNameForTwitter: ({ elementName: 'integrationNameForTwitter', elementPath: `//div[@class='add-webhook-integration add-twitter-integration']//div[@class='field-item-right']/input[@placeholder='What name should this post appear from?']` }),
  saveButtonForTwitter: ({ elementName: 'saveButtonForTwitter', elementPath: `//div[@class='add-webhook-integration add-twitter-integration']//button[contains(text(),'Save')]` }),
  divPostEditor: ({ elementName: 'divPostEditor', elementPath: `//div[@aria-label='Tweet text']` }),
  tweetButton: ({ elementName: 'tweetButton', elementPath: `//div[@data-testid='toolBar']//span[text()='Tweet']` }),
  removeThisIntegration: ({ elementName: 'removeThisIntegration', elementPath: `//span[text()='Remove this integration']` }),
  buttonOk: ({ elementName: 'buttonOk', elementPath: `//button[text()='Ok']` }),
  integrationDeletedAlert: ({ elementName: 'integrationDeletedAlert', elementPath: `//span[text()='Integration deleted']` }),
  createGroupInDirectory: ({ elementName: 'createGroupInDirectory', elementPath: `//button[contains(text(),'Create Group')]` }),
  grpSearch: ({ elementName: 'grpSearch', elementPath: `//div[@class='header-section']//input[@class='form-control']` }),
  members: ({ elementName: 'members', elementPath: `//div[@class='app-sub-header']//a[contains(text(),'Member')]` }),
  makeAdminButton: ({ elementName: 'makeAdminButton', elementPath: `//div[@class='modal-footer']/button[contains(text(),'Make admin')]` }),
  settings: ({ elementName: 'settings', elementPath: `//div[@class='app-sub-header']/a[contains(text(),'Settings')]` }),
  publicGroup: ({ elementName: 'publicGroup', elementPath: `//div[@class='setting-controls']/div[@class='groupType']/div/div[contains(text(),'Public')]` }),
  privateGroupSettings: ({ elementName: 'privateGroupSettings', elementPath: `//div[@class='setting-controls']/div[@class='groupType']/div/div[contains(text(),'Private')]` }),
  makeAdmin: ({ elementName: 'makeAdmin', elementPath: `//a[@class='menu-item-wrapper']/span[contains(text(),'Make group admin')]` }),
  groupNameSettings: ({ elementName: 'groupNameSettings', elementPath: `//div[@class='setting-controls']/input` }),
  seeMorePublic: ({ elementName: 'seeMorePublic', elementPath: `//li[@bo-show='publicGroupsCollapsed && publicGroupsArray && publicGroupsArray.length > 5']/a` }),
  deleteGroupSettings: ({ elementName: 'deleteGroupSettings', elementPath: `//div[@class='settings-footer']//a[@class='pull-left' and contains(text(),'Delete group')]` }),
  deleteButtonSettings: ({ elementName: 'deleteButtonSettings', elementPath: `//div[@class='modal-footer']/button[contains(text(),'Delete')]` }),
  whatsNew: ({ elementName: 'whatsNew', elementPath: `//div[@class='row no-margin whatsnew menu-items-container']//a[contains(text(),'What')]` }),
  loginButtonForTwitter: ({ elementName: 'loginButtonForTwitter', elementPath: `//a[@data-testid='loginButton']` }),
  passwordInputFieldForTwitter: ({ elementName: 'passwordInputFieldForTwitter', elementPath: `//input[@type='password']` }),
  twitterLoginButton: ({ elementName: 'twitterLoginButton', elementPath: `(//div[@data-testid='LoginForm_Login_Button']//span[contains(text(),'Log in')])[1]` }),
  keepAccountSafe: ({ elementName: 'keepAccountSafe', elementPath: `//div[@class='PageHeader Edge' and contains(text(),'Help us keep your account safe.')]` }),
  textFieldForPhoneNo: ({ elementName: 'textFieldForPhoneNo', elementPath: `//input[@class='Form-textbox Edge-textbox']` }),
  submit: ({ elementName: 'submit', elementPath: `//input[@value='Submit']` }),
  shareaPostPk: ({ elementName: 'shareaPostPk', elementPath: `//div[@id='homeAppCont']//div[@class='checklist-wrapper']//ul[@class='onboarding-checklist']//a[normalize-space()='2. Share a post']` }),
  shareaPostStrikedPk: ({ elementName: 'shareaPostStrikedPk', elementPath: `//div[@id='homeAppCont']//div[@class='checklist-wrapper']//ul[@class='onboarding-checklist']//a[normalize-space()='2. Share a post' and @class='strike-through']` }),
  shareaPostCheckedPk: ({ elementName: 'shareaPostCheckedPk', elementPath: `//div[@id='homeAppCont']//div[@class='checklist-wrapper']//ul[@class='onboarding-checklist']//a[normalize-space()='2. Share a post' and @class='strike-through']//i[contains(@class,'glyphicon-ok')]` }),
  usersListInGroup: ({ elementName: 'usersListInGroup', elementPath: `//div[@class='user-master-list']` }),
  copyPostlink: ({ elementName: 'copyPostlink', elementPath: `(//a[contains(text(),'Copy link')])[1]` }),
  postLink: ({ elementName: 'postLink', elementPath: `//div[@class='ql-editor scroll-enabled']//a[@href]` }),
  tooltipUrl: ({ elementName: 'tooltipUrl', elementPath: `//div[@class='ql-tooltip ql-link-tooltip']/a[@class='url']` }),
  searchForPeopleInputField: ({ elementName: 'searchForPeopleInputField', elementPath: `//input[@placeholder='Search for people']` }),
  progressLine: ({ elementName: 'progressLine', elementPath: `//div[@class='progress-line']` }),
  imapIntegrations: ({ elementName: 'imapIntegrations', elementPath: `//h3[contains(text(),'IMAP Integration')]` }),
  selectDropdown: ({ elementName: 'selectDropdown', elementPath: `//select[@name='email_provider']` }),
  searchforIntegrations: ({ elementName: 'searchforIntegrations', elementPath: `(//input[@placeholder='Search for integrations'])[2]` }),
  yahooOption: ({ elementName: 'yahooOption', elementPath: `//option[@label='Yahoo']` }),
  emailAddressforImap: ({ elementName: 'emailAddress', elementPath: `//input[@name='email_address']` }),
  userOption: ({ elementName: 'userOption', elementPath: `//span[@role='presentation']` }),
  accountInfo: ({ elementName: 'accountInfo', elementPath: `//a[contains(text(),'Account info')]` }),
  accountSecurityForYahoo: ({ elementName: 'accountSecurityForYahoo', elementPath: `//span[contains(text(),'Account Security')]` }),
  moreConvo: ({ elementName: 'moreConvo', elementPath: `//div[@class='settings-app-password']` }),
  selectApp: ({ elementName: 'selectApp', elementPath: `//select[@name='selectedApp']` }),
  otherApp: ({ elementName: 'otherApp', elementPath: `//option[@value='Other']` }),
  customValue: ({ elementName: 'customValue', elementPath: `//input[@id='txtApName']` }),
  generate: ({ elementName: 'generate', elementPath: `//button[contains(text(),'Generate')]` }),
  getPassword: ({ elementName: 'getPassword', elementPath: `//div[@class='tcv-code-txt medium-animated fadeIn']` }),
  doneButton: ({ elementName: 'doneButton', elementPath: `//button[contains(text(),'Done')]` }),
  closeCross: ({ elementName: 'closeCross', elementPath: `//a[@class='close']` }),
  passwordImap: ({ elementName: 'passwordImap', elementPath: `//input[@name='password']` }),
  authenticateButton: ({ elementName: 'authenticateButton', elementPath: `(//button[contains(text(),'Authenticate')])[1]` }),
  okButton: ({ elementName: 'okButton', elementPath: `//button[contains(text(),'OK')]` }),
  addGroup: ({ elementName: 'addGroup', elementPath: `//div[@class='add-webhook-integration imap-integration-styles']//div/a[contains(text(),'create a new group')]` }),
  authenticate: ({ elementName: 'authenticate', elementPath: `(//button[contains(text(),'Authenticate')])[2]` }),
  enableReply: ({ elementName: 'enableReply', elementPath: `//label[@for='enableReplySmtp']` }),
  integrationNameForImap: ({ elementName: 'integrationNameForImap', elementPath: `//div[@class='add-webhook-integration imap-integration-styles']//div[@class='field-item-right']/input[@placeholder='What name should this post appear from?']` }),
  saveButtonForImap: ({ elementName: 'saveButtonForImap', elementPath: `//div[@class='add-webhook-integration imap-integration-styles']//button[contains(text(),'Save')]` }),
  getCompanyInviteLink: ({ elementName: 'getCompanyInviteLink', elementPath: `//div[@class='feed-right-panel-wrapper']//div[@class='vanity-help-txt']/span[contains(text(),'Get your company')]` }),
  backToIntegrations: ({ elementName: 'backToIntegrations', elementPath: `//div[@class='add-webhook-integration imap-integration-styles']//a[contains(text(),'Back to Integrations')]` }),
  configuredIntegrations: ({ elementName: 'configuredIntegrations', elementPath: `//a[contains(text(),'Configured Integrations')]` }),
  managePostPermissionsHeading: ({ elementName: 'managePostPermissionsHeading', elementPath: `//h4[contains(text(),'Manage Post Permissions')]` }),
  permanentFieldsHeading: ({ elementName: 'permanentFieldsHeading', elementPath: `//div[@class='header' and contains(text(),'Permanent fields')]` }),
  composeButtonGuerrialMail: ({ elementName: 'composeButtonGuerrialMail', elementPath: `//a[@title='Compose']` }),
  toInputFieldGuerrilaMail: ({ elementName: 'toInputFieldGuerrilaMail', elementPath: `//input[@class='form-field outline' and @name='to']` }),
  subjectGuerrilaMail: ({ elementName: 'subjectGuerrilaMail', elementPath: `//input[@class='form-field outline' and @name='subject']` }),
  bodyGuerrilaMail: ({ elementName: 'bodyGuerrilaMail', elementPath: `//textarea[@class='form-field outline' and @name='body']` }),
  sendButtonGuerrilaMail: ({ elementName: 'sendButtonGuerrilaMail', elementPath: `//input[@name='send']` }),
  recaptchaCheckbox: ({ elementName: 'recaptchaCheckbox', elementPath: `//div[@class='recaptcha-checkbox-border']` }),
  generateAppPasswords: ({ elementName: 'generateAppPasswords', elementPath: `//a[@class='mc-action link-generate-ap']` }),
  getStarted: ({ elementName: 'getStarted', elementPath: `//button[contains(text(),'Get')]` }),
  deleteButtoninImapYahoo: ({ elementName: 'deleteButtoninImapYahoo', elementPath: `//button[contains(text(),'Delete')]` }),
  accessandSecurity: ({ elementName: 'accessandSecurity', elementPath: `//h1[contains(text(),'Access')]` }),
  cancelButtonInYahoo: ({ elementName: 'cancelButtonInYahoo', elementPath: `//input[@value='Cancel']` }),
  sharedPostWithFileAttachment: (postTitle) => ({ elementName: 'sharedPostWithFileAttachment', elementPath: `//p[contains(text(), '${postTitle}')]/../../following-sibling::div[@id='notegallery']//a/img` }),
  sharedPostTitle: (postTitle) => ({ elementName: 'sharedPostTitle', elementPath: `//div/a/span[contains(text(), 'Test Post: ${postTitle}')]` }),
  createdPostCommentLink: (postTitle) => ({ elementName: 'createdPostCommentLink', elementPath: `//a/span[contains(text(),'${postTitle}')]/../../../..//a[text()='Comment']` }),
  commentOnCreatedPost: (comment) => ({ elementName: 'commentOnCreatedPost', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[text()='${comment}: Test Comment.']` }),
  createdCommentInPost: (postCommentText) => ({ elementName: 'createdCommentInPost', elementPath: `(//div[@bo-show="!showMore"]/p[text()='${postCommentText}'])[last()]` }),
  commentElipses: (postCommentText) => ({ elementName: 'commentElipses', elementPath: `(//div[@bo-show="!showMore"]/p[text()='${postCommentText}'])[last()]/../../../..//i` }),
  updatedCommentInPost: (postCommentText) => ({ elementName: 'updatedCommentInPost', elementPath: `(//div[@bo-show="!showMore"]/p[text()='${postCommentText} Edited.'])[last()]` }),
  editedNowTimestampForComment: (postCommentText) => ({ elementName: 'editedNowTimestampForComment', elementPath: `(//div[@bo-show="!showMore"]/p[text()='${postCommentText} Edited.'])[last()]/../../..//a[text()='now']` }),
  postLikedByUserName: ({ elementName: 'postLikedByUserName', elementPath: `//div[contains(@class,'likes-container')]/a` }),
  tagVerification: ({ elementName: 'tagVerification', elementPath: `//li[@ng-repeat="tag in noteData.item.tagList"]/a[contains(text(),'MyTag')] | //li[@ng-repeat="tag in noteData.item.tagList"]/a[contains(text(),'mytag')]` }),
  updatedCommentElipses: (postCommentText) => ({ elementName: 'updatedCommentElipses', elementPath: `(//div[@bo-show="!showMore"]/p[text()='${postCommentText} Edited.'])[last()]/../../../..//i` }),
  moreLinkWithPostContent: (postTitle) => ({ elementName: 'moreLinkWithPostContent', elementPath: `//div/a/span[contains(text(), 'Test Post: ${postTitle}')]/../../..//a/b[text()='more']` }),
  lessLinkWithPostContent: (postTitle) => ({ elementName: 'lessLinkWithPostContent', elementPath: `//div/a/span[contains(text(), 'Test Post: ${postTitle}')]/../../..//a/b[text()='less']` }),
  openPostLinkWithPostContent: (postTitle) => ({ elementName: 'openPostLinkWithPostContent', elementPath: `//div/a/span[contains(text(), 'Test Post: ${postTitle}')]/../../..//a/b[text()='Open post']` }),
  sharedPostPathInSearchResults: (postTitle) => ({ elementName: 'sharedPostPathInSearchResults', elementPath: `//div/a/span/span[text()='${postTitle}']` }),
  createdCommentNotification: (postTitle) => ({ elementName: 'createdCommentNotification', elementPath: `//div[@class='details-wrapper']/span/span[contains(text(),'${postTitle}')]` }),
  userNameSuggestion: (userFullName) => ({ elementName: 'userNameSuggestion', elementPath: `//span/b[contains(text(), "${userFullName}")]` }),
  imapIntegrationInSetupIntegration: ({ elementName: 'imapIntegrationInSetupIntegration', elementPath: `//div[@class='integration-details']//a/span[contains(text(),'IMAP Integration')]` }),
  imapGroupName: (groupName) => ({ elementName: 'imapGroupName', elementPath: `//div[@class='add-webhook-integration imap-integration-styles']//span[contains(text(),'${groupName}')]` }),
  verifyIsIntegrationGetCreated: (imapName) => ({ elementName: 'verifyIsIntegrationGetCreated', elementPath: `//div[@class='integration-details']//a/span[contains(text(),'${imapName}')]` }),
  incomingNoteCreation: (postTitle) => ({ elementName: 'incomingNoteCreation', elementPath: `//div/a/span[contains(text(),'${postTitle}')]` }),
  integrationDropdown: (imapName) => ({ elementName: 'integrationDropdown', elementPath: `//div[@class='integration-details']//a/span[contains(text(),'${imapName}')]/../../../../../../..//cnv-dropdowns[contains(@bo-if,'dropdownCtrl.options')]//i` }),
  deleteConvoImap: (imapName) => ({ elementName: 'deleteConvoImap', elementPath: `//div[@class='ap-al-title-holder']/span[@class='ap-app-name' and contains(text(),'${imapName}')]/..//button[contains(text(),'Delete')]` }),
  twitterIntegrationInSetupIntegration: ({ elementName: 'twitterIntegrationInSetupIntegration', elementPath: `//div[@class='integration-details']//a/span[contains(text(),'Twitter')]` }),
  twitterGroupName: (groupName) => ({ elementName: 'twitterGroupName', elementPath: `//div[@class='add-webhook-integration add-twitter-integration']//span[contains(text(),'${groupName}')]` }),
  verifyIsTwitterIntegrationGetCreated: (twitterName) => ({ elementName: 'verifyIsTwitterIntegrationGetCreated', elementPath: `//div[@class='integration-details']//a/span[contains(text(),'${twitterName}')]` }),
  verifyIntegrationTitle: (twitterName) => ({ elementName: 'verifyIntegrationTitle', elementPath: `//span[@id='feed_title']//span[contains(text(),'${twitterName}')]` }),
  Tweet: (tweetPost) => ({ elementName: 'Tweet', elementPath: `//span[text()='${tweetPost}']` }),
  tweetPostInConvo: (tweetPost) => ({ elementName: 'tweetPostInConvo', elementPath: `//cnv-feed-item//p[text()='${tweetPost}']` }),
  integrationDropdownTwitter: (twitterName) => ({ elementName: 'integrationDropdownTwitter', elementPath: `//div[@class='integration-details']//a/span[contains(text(),'${twitterName}')]/../../../../../../..//cnv-dropdowns[contains(@bo-if,'dropdownCtrl.options')]//i` }),
  existnetworkName: ({ elementName: 'existnetworkName', elementPath: `(//div[@class='network-logo-container']/a)[2]` }),
  networkName: (networkName) => ({ elementName: 'networkName', elementPath: `//div[@class='network-logo-container']/a[text()='${networkName}']` }),
  domainUnblockLink: (blockedDomain) => ({ elementName: 'domainUnblockLink', elementPath: `//li/span[text()='${blockedDomain}']/following-sibling::span[text()='Unblock']` }),
  groupSuggestion: (groupName) => ({ elementName: 'groupSuggestion', elementPath: `//b[contains(text(), '${groupName}')]` }),
  privateGroupInInlineInsert: (groupName) => ({ elementName: 'privateGroupInInlineInsert', elementPath: `//li[contains(@class,'privateGroup')]/div/span[text()='${groupName}']` }),
  defaultRecipientGroupCrossIcon: (groupName) => ({ elementName: 'defaultRecipientGroupCrossIcon', elementPath: `//span[text()='${groupName}']/..//div` }),
  inboxId: ({ elementName: 'inboxId', elementPath: `//span[@id='inbox-id']` }),
  inboxIdInputField: ({ elementName: 'inboxIdInputField', elementPath: `//span[@id='inbox-id']/input` }),
  setButton: ({ elementName: 'setButton', elementPath: `//span[@id='inbox-id']/button[text()='Set']` }),
  selectDomainDropdown: ({ elementName: 'selectDomainDropdown', elementPath: `//select[@id='gm-host-select']` }),
  selectDomain: (emaildomainFromList) => ({ elementName: 'selectDomain', elementPath: `//option[@value='${emaildomainFromList}']` }),
  scrambleAddressCheckbox: ({ elementName: 'scrambleAddressCheckbox', elementPath: `//span[@id='alias-box']/input` }),
  emailAddress: (tempEmail) => ({ elementName: 'emailAddress', elementPath: `//span[contains(text(),'${tempEmail}')]` }),
  emailSubject: ({ elementName: 'emailSubject', elementPath: `(//td[contains(text(),'Your verification code is')])[1]` }),
  grpPost: (groupName) => ({ elementName: 'grpPost', elementPath: `//span[contains(text(),"has created the")]/a[contains(text(),"${groupName}")]` }),
  sharedPostElipses: (postTitle) => ({ elementName: 'sharedPostElipses', elementPath: `//span/p[contains(text(), "${postTitle}")]/ancestor::div[position()=2]/preceding-sibling::div[@class="action-items-wrapper"]/cnv-dropdowns` }),
  sharedPostMuteIcon: (postTitle) => ({ elementName: 'sharedPostMuteIcon', elementPath: `//span/p[contains(text(), "${postTitle}")]/ancestor::div[position()=2]/preceding-sibling::div[@class="action-items-wrapper"]/i[contains(@class,"mute")]` }),
  postUpdatedWithTag: (postTitle) => ({ elementName: 'postUpdatedWithTag', elementPath: `//span//p[contains(text(), "${postTitle}")]/../../../../div[@class="feed-info-container"]//li[@class="pull-right tags nobullet dropdown"]/a[contains(text(),"#Database")] | //span//p[contains(text(), "${postTitle}")]/../../../../div[@class="feed-info-container"]//li[@class="pull-right tags nobullet dropdown"]/a[contains(text(),"#database")]` }),
  sharedPostStarIcon: (postTitle) => ({ elementName: 'sharedPostStarIcon', elementPath: `//span/p[contains(text(), "${postTitle}")]/ancestor::div[position()=2]/preceding-sibling::div[@class="action-items-wrapper"]/i[contains(@class,"Star")]` }),
  postWithHashTag: (postTitle) => ({ elementName: 'postWithHashTag', elementPath: `//p[contains(text(), "${postTitle}")]/../../..//following::a[text()="#database"] | //p[contains(text(), "${postTitle}")]/../../..//following::a[text()="#Database"]` }),
  gifVerification: (postTitle) => ({ elementName: 'gifVerification', elementPath: `(//p[contains(text(),"${postTitle}")]/../../following-sibling::div[@id="notegallery"]//img)[1]` }),
  boldPost: (postTitle) => ({ elementName: 'boldPost', elementPath: `//span/p/b[contains(text(),"${postTitle}")]` }),
  bulletPointsPost: (postTitle) => ({ elementName: 'bulletPointsPost', elementPath: `//li[contains(text(), "${postTitle}")]` }),
  serialPointsPostVerification: (postTitle) => ({ elementName: 'serialPointsPostVerification', elementPath: `//li[contains(text(), "${postTitle}")]` }),
  postsharedwithCrossedText: (postTitle) => ({ elementName: 'postsharedwithCrossedText', elementPath: `//span/p/s[contains(text(),"${postTitle}")]` }),
  postsharedwithItalicText: (postTitle) => ({ elementName: 'postsharedwithItalicText', elementPath: `//span/p/i[contains(text(),"${postTitle}")]` }),
  postsharedwithUnderlineText: (postTitle) => ({ elementName: 'postsharedwithUnderlineText', elementPath: `//span/p/u[contains(text(),"${postTitle}")]` }),
  draftPost: (postTitle) => ({ elementName: 'draftPost', elementPath: `//span/p[contains(text(),"${postTitle}")]` }),
  postwithEmoticon: (postTitle) => ({ elementName: 'postwithEmoticon', elementPath: `//p[contains(text(), '${postTitle} This post will contain emoticon:😀')]` }),
  insertLinkPost: (postTitle) => ({ elementName: 'insertLinkPost', elementPath: `//cnv-feed-item//a/span[contains(text(),"${postTitle}")]/../../..//a[text()="Google"]` }),
  sharedPostImageVerification: (postTitle) => ({ elementName: 'sharedPostImageVerification', elementPath: `(//p[contains(text(),"${postTitle}")]/../../following-sibling::div[@id="notegallery"]//img)[1]` }),
  mentionedGroup: (groupName) => ({ elementName: 'mentionedGroup', elementPath: `//span/b[contains(text(),"${groupName}")]` }),
  mentionedGroupVerification: (postTitle, groupName) => ({ elementName: 'mentionedGroupVerification', elementPath: `//div/a/span[contains(text(), "${postTitle}")]/../../../div[@class="note-details"]/span/p/a[contains(text(),"${groupName}")]` }),
  getStartedLink: ({ elementName: 'getStartedLink', elementPath: `//div[@id='inviteUsersSubModeDefault']//span[text()='get started ']` }),
  groupToggleDropdown: (groupName) => ({ elementName: 'groupToggleDropdown', elementPath: `//span[@id="feed_title"]/strong/span[contains(text(),"${groupName}")]/../..//cnv-dropdowns/span[@class="dropdown cnv-custom-dropdown"]/a/i` }),
  grpDeletionVerification: ({ elementName: 'groupToggleDropdown', elementPath: `//div[@class="feed_load_status" and contains(text(),"There is no feed to display.")]` }),
  grpNameInLeftPanel: (groupName) => ({ elementName: 'grpNameInLeftPanel', elementPath: `//li/div/a[contains(text(),"${groupName}")]` }),
  toinputFieldUpdated: ({ elementName: 'toinputField', elementPath: `(//div[@class='tags'])[3]` }),
  typeintofieldUpdated: ({ elementName: 'typeintofieldUpdated', elementPath: `//div[@id='inline-insert-files-paste-target']/div[3]/div/div/tags-input/div/div/div/input` }),
  searchedGroupSuggestionGroupforTest: ({ elementName: 'searchedGroupSuggestionGroupforTest', elementPath: `//span/b[contains(text(),"feedRenderingGroup")]` }),
  searchIconInFeed: ({ elementName: 'searchIconInFeed', elementPath: `//div[@class='search-icon']` }),
  groupDuplicationAlert: ({ elementName: 'groupDuplicationAlert', elementPath: `//div[@class="group-alert-banner group-alert-slideDown"]/span[contains(text(),"already a member of that group.")]/a[contains(text(),"Try another name")] | //span[contains(text(),'A group with that name already exists.')]` }),
  pinnedContentVerification: ({ elementName: 'pinnedContentVerification', elementPath: `//a[@bo-href="pin.url" and contains(text(),"Google")]` }),
  editOption: ({ elementName: 'editOption', elementPath: `//a[@bo-href="pin.url" and contains(text(),"Google")]/../..//li/a[contains(text(),"Edit")]` }),
  searchedGroupSuggestionGroup: (groupName) => ({ elementName: 'searchedGroupSuggestionGroup', elementPath: `//span/b[contains(text(),"${groupName}")]` }),
  topPinnedGrpVerification: (groupName) => ({ elementName: 'topPinnedGrpVerification', elementPath: `(//li[contains(@bo-repeat,"group in publicGroupsArray")])[1]/div/a[contains(text(),"${groupName}")]` }),
  postCreatedThroughGroupEmail: (postTitle) => ({ elementName: 'postCreatedThroughGroupEmail', elementPath: `//a/span[contains(text(),'${postTitle}')]` }),
  sharedPostWithCsvFileAttachment: (postTitle) => ({ elementName: 'sharedPostWithCsvFileAttachment', elementPath: `//p[contains(text(), '${postTitle}')]/../../following-sibling::div[@id='notegallery']//a` }),
  galleryViewFileName: ({ elementName: 'galleryViewFileName', elementPath: `//div[@class='file-meta-info']/div/strong[@class='title']` }),
  pptDisplayedFileTextInGalleryView: ({ elementName: 'pptDisplayedFileTextInGalleryView', elementPath: `//div[@class='textLayer']` }),
  createdImageSnippetUsingRectangleIcon: (postTitle) => ({ elementName: 'createdImageSnippetUsingRectangleIcon', elementPath: `(//div[@class="comment_txt"]/div/p[contains(text(),"${postTitle}: Rectangle Snippet")]/../../..//a/img)[2]` }),
  createdImageSnippetUsingColorRectangleIcon: (postTitle) => ({ elementName: 'createdImageSnippetUsingColorRectangleIcon', elementPath: `(//div[@class="comment_txt"]/div/p[contains(text(),"${postTitle}: Color Rectangle Snippet")]/../../..//a/img)[2]` }),
  createdImageSnippetUsingArrowIcon: (postTitle) => ({ elementName: 'createdImageSnippetUsingArrowIcon', elementPath: `(//div[@class="comment_txt"]/div/p[contains(text(),"${postTitle}: Arrow Snippet")]/../../..//a/img)[2]` }),
  firstImageFileConversionSuccess: ({ elementName: 'firstImageFileConversionSuccess', elementPath: `(//img[@class='file-converted'])[1]` }),
  secondImageFileConversionSuccess: ({ elementName: 'secondImageFileConversionSuccess', elementPath: `(//img[@class='file-converted'])[2]` }),
  sharedPostWithImageAttachment: (postTitle) => ({ elementName: 'sharedPostWithImageAttachment', elementPath: `(//p[contains(text(), '${postTitle}')]/../../following-sibling::div[@id='notegallery']//img)[1]` }),
  imageLinkInChatMessageReceivedFromFirstUser: (chatMessage) => ({ elementName: 'imageLinkInChatMessageReceivedFromFirstUser', elementPath: `//div[contains(@class, "messageFromOtherUser")]/span[contains(text(), "${chatMessage}")]/a` }),
  createdImageSnippet: (commenttext) => ({ elementName: 'createdImageSnippet', elementPath: `(//div[@class="comment_txt"]/div/p[contains(text(),"${commenttext}")]/../../..//a/img)[2]` }),
  createdImageSnippetCommentElipses: (commenttext) => ({ elementName: 'createdImageSnippetCommentElipses', elementPath: `(//div[@class="comment_txt"]/div/p[contains(text(),"${commenttext}")]/../../..//a/img)[2]/../../../..//a/i` }),
  imageSnippetCommentLinkInChatMessageReceivedFromFirstUser: (chatMessage) => ({ elementName: 'imageSnippetCommentLinkInChatMessageReceivedFromFirstUser', elementPath: `//div[contains(@class, "messageFromOtherUser")]/span/a[contains(text(), "${chatMessage}")]` }),
  sharedPostWithImageSnippetCommentLink: (commenttext) => ({ elementName: 'sharedPostWithImageSnippetCommentLink', elementPath: `//cnv-feed-item//p/a[contains(text(), "${commenttext}")]` }),
  commentTextAreaForCreatedLinkPost: (commenttext) => ({ elementName: 'commentTextAreaForCreatedLinkPost', elementPath: `//div[contains(text(), "${commenttext} Link Post Comment")]/../../../../../../..//div[@class="dummy-text-area"]` }),
  fileUploadInputFieldInCommentSection: (commenttext) => ({ elementName: 'fileUploadInputFieldInCommentSection', elementPath: `//div[contains(text(), "${commenttext} Link Post Comment")]/../../../../../../../div[contains(@class,"feed-comment-editor")]//input[@name="file"]` }),
  fileUploadInputFieldInCommentSection2: (commenttext) => ({ elementName: 'fileUploadInputFieldInCommentSection2', elementPath: `//a/span[contains(text(),'${commenttext}')]/../../../..//cnv-comments-panel//cnv-comment-editor/div/div/input` }),
  commentTextWithFileAttachmentInLinkPost: (commenttext) => ({ elementName: 'commentTextWithFileAttachmentInLinkPost', elementPath: `//p[contains(text(), '${commenttext} Link Post Comment With File Attachment')]/../../..//a/span/img[@src]` }),
  commentTextWithFileAttachmentInLinkPost2: (commenttext) => ({ elementName: 'commentTextWithFileAttachmentInLinkPost2', elementPath: `//p[contains(text(), '${commenttext} Link Post Comment With Image File Attachment')]/../../..//a/span/img[@src]` }),
  commentTextWithFileAttachmentInNormalPost: (commenttext) => ({ elementName: 'commentTextWithFileAttachmentInNormalPost', elementPath: `//p[contains(text(), '${commenttext} Normal Post Comment With File Attachment')]/../../..//a/span/img[@src]` }),
  commentTextWithFileAttachmentInNormalPost2: (commenttext) => ({ elementName: 'commentTextWithFileAttachmentInNormalPost2', elementPath: `//p[contains(text(), '${commenttext} Normal Post Comment With Image File Attachment')]/../../..//a/span/img[@src]` }),
  searchedGrp: (groupName) => ({ elementName: 'searchedGrp', elementPath: `//div[@class='group-details']/div/a[contains(text(),'${groupName}')]` }),
  hasFiltersList: ({ elementName: 'hasFiltersList', elementPath: `//cnv-dropdown/ul/li/div/span[1]` }),
  isFiltersList: ({ elementName: 'isFiltersList', elementPath: `//cnv-dropdown/ul/li/div/span[1]` }),
  groupSuggestion: (groupName) => ({ elementName: 'groupSuggestion', elementPath: `//cnv-dropdown//b[text()='${groupName}']` }),
  groupTitle: (groupName) => ({ elementName: 'groupTitle', elementPath: `//span[@id='feed_title']/strong/span[@ng-bind and text()='${groupName}']` }),
  postFoundWithSearchedKeyword: (searchedWord) => ({ elementName: 'postFoundWithSearchedKeyword', elementPath: `//span[text()='${searchedWord}']` }),
  searchSuggestion: (searchedWord) => ({ elementName: 'searchSuggestion', elementPath: `//cnv-dropdown//span[contains(text(),'${searchedWord}')]` }),
  fromUserFilterSuggestion: (userEmail) => ({ elementName: 'fromUserFilterSuggestion', elementPath: `//span/b[text()='${userEmail}']` }),
  toUserFilterSuggestion: (userEmail) => ({ elementName: 'toUserFilterSuggestion', elementPath: `//span/b[text()='${userEmail}']` }),
  postSharedWithFilterToUser: (userFullName) => ({ elementName: 'postSharedWithFilterToUser', elementPath: `//div[@class='shared-with-container']//a[text()='${userFullName}']` }),
  postFoundSearchedKeyword: (searchedWord) => ({ elementName: 'postFoundSearchedKeyword', elementPath: `//span[text()='Test' or text()='Post' or text()='${searchedWord}']` }),
  userSuggestion: (userEmail) => ({ elementName: 'userSuggestion', elementPath: `//cnv-dropdown//b[text()='${userEmail}']` }),
  userTitle: (userFullName) => ({ elementName: 'userTitle', elementPath: `//span[@id='feed_title']//span[text()='${userFullName}']` }),
  groupCreationPost: (groupName) => ({ elementName: 'groupCreationPost', elementPath: `//span[contains(text(),"has created the")]/a[contains(text(),"PG ${groupName}")]` }),
  createdLinkPostComment: (commentText) => ({ elementName: 'createdLinkPostComment', elementPath: `(//div[contains(text(), "${commentText} Link Post Comment")])[1]` }),
  searchedPostResult: (postTitle) => ({ elementName: 'searchedPostResult', elementPath: `//div/a/span/span[contains(text(),'${postTitle}')]` }),
  fetchedLocation: ({ elementName: 'fetchedLocation', elementPath: `//p[@class="geo-location"]/span[@class="geo-location-text"]/../../../cnv-editor/following-sibling::div[@class="location-container"]//span[@class="geo-location-text"]` }),
  locationPost: (postTitle) => ({ elementName: 'locationPost', elementPath: `//div/a/span[contains(text(),"${postTitle}")]/../../../..//div[@class="geo-location-container"]//span[@class="geo-location-text"]` }),
  mapShowing: (postTitle) => ({ elementName: 'mapShowing', elementPath: `//div/a/span[contains(text(),"${postTitle}")]/../../../..//div[@class="map-container"]` }),
  locationInPostDetailViewNew: (postTitle) => ({ elementName: 'locationInPostDetailViewNew', elementPath: `//div[@class="title"]/span[contains(text(),"${postTitle}")]/../../..//div[@class="geo-location-container-editor"]//span[@class="geo-location-text"]` }),
  mapShowingInPostDetailView: (postTitle) => ({ elementName: 'mapShowingInPostDetailView', elementPath: `//div[@class="title"]/span[contains(text(),"${postTitle}")]/../../../div[@id="map-container"]` }),
  fetchedLocation2: ({ elementName: 'fetchedLocation2', elementPath: `//div[@class="location-container-editor"]/p[@class="geo-location"]/span[@class="geo-location-text"]` }),
  locationEditView: (postTitle) => ({ elementName: 'locationEditView', elementPath: `//div[@class="title"]/span[contains(text(),"${postTitle}")]/../../..//div[@class="geo-location-container-editor"]//span[@class="geo-location-text"]` }),
  sentChatMessage: (chatMessage) => ({ elementName: 'sentChatMessage', elementPath: `//span[@class='chat-msg-cont' and text()='${chatMessage}']` }),
  receivedChatMessage: (chatMessage) => ({ elementName: 'receivedChatMessage', elementPath: `//span[@class='chat-msg-cont' and text()='${chatMessage}']` }),
  unreadChatCount: (userFullName) => ({ elementName: 'unreadChatCount', elementPath: `//div[contains(@class,'chatListTitle') and text()='${userFullName}']/../div/div[@class='listUnreadCount']` }),
  emojiGroupChatMessage: ({ elementName: 'emojiGroupChatMessage', elementPath: `//span[contains(@class,'chat-msg-cont') and text()='😀']` }),
  renamedGroupChatMessage: (groupName) => ({ elementName: 'renamedGroupChatMessage', elementPath: `//span[text()='You named this group chat "${groupName}"']` }),
  searchedGroupChatSuggestion: (chatMessage) => ({ elementName: 'searchedGroupChatSuggestion', elementPath: `//div[contains(@class,'chatListTitle') and text()='${chatMessage}']` }),
  sharedChatInPost: (chatMessage) => ({ elementName: 'sharedChatInPost', elementPath: `//a/span[text()='Chat with ${chatMessage}']` }),
  suggestedUserEmail1: (userEmail) => ({ elementName: 'suggestedUserEmail1', elementPath: `//span/b[text()='${userEmail}'] | (//span[text()='${userEmail}'])[2]` }),
  sentGroupChatMessage: (groupMessage) => ({ elementName: 'sentGroupChatMessage', elementPath: `//span[@class='message-text' and text()='${groupMessage}']` }),
  firstCreatedCustomFieldDeleteButton: ({ elementName: 'firstCreatedCustomFieldDeleteButton', elementPath: `//input[@name='First CF']/../../i[contains(@class,'action-btn remove')]` }),
  secondCreatedCustomFieldDeleteButton: ({ elementName: 'secondCreatedCustomFieldDeleteButton', elementPath: `//input[@name='Second CF']/../../i[contains(@class,'action-btn remove')]` }),
  thirdCreatedCustomFieldDeleteButton: ({ elementName: 'thirdCreatedCustomFieldDeleteButton', elementPath: `//input[@name='First Custom Field']/../../i[contains(@class,'action-btn remove')]` }),
  createdCustomField: ({ elementName: 'createdCustomField', elementPath: `//div[@class='form-group half']//input[contains(@class,'ng-not-empty') and @name='First Custom Field']` }),
  createdCustomFieldDeleteButton: ({ elementName: 'createdCustomFieldDeleteButton', elementPath: `//div[@class='form-group half']//input[contains(@class,'ng-not-empty') and @name='First Custom Field']/../../i[@class=' action-btn remove']` }),
  firstCreatedCustomField: ({ elementName: 'firstCreatedCustomField', elementPath: `//div[@class='form-group half']//input[contains(@class,'ng-not-empty') and @name='First CF']` }),
  customFieldBlackLockIcon: ({ elementName: 'customFieldBlackLockIcon', elementPath: `//div[@class='form-group half']//input[contains(@class,'ng-not-empty') and @name='First CF']/..//i[contains(@class,'lock-gray')]` }),
  customFieldRedLockIcon: ({ elementName: 'customFieldRedLockIcon', elementPath: `//div[@class='form-group half locked']//input[contains(@class,'ng-not-empty') and @name='First CF']/..//i[contains(@class,'lock-red')]` }),
  secondCreatedCustomField: ({ elementName: 'secondCreatedCustomField', elementPath: `//div[@class='form-group half']//input[contains(@class,'ng-not-empty') and @name='Second CF']` }),
  firstCustomFieldForUser: ({ elementName: 'firstCustomFieldForUser', elementPath: `//span[contains(text(),'First CF')]` }),
  firstCustomFieldLockImageForUser: ({ elementName: 'firstCustomFieldLockImageForUser', elementPath: `//span[contains(text(),'First CF')]/../../..//span[contains(@class,'pencil-icon')]//img[contains(@src,'lock')]` }),
  secondCustomFieldForUser: ({ elementName: 'secondCustomFieldForUser', elementPath: `//span[contains(text(),'Second CF')]` }),
  secondCustomFieldPencilImageForUser: ({ elementName: 'secondCustomFieldPencilImageForUser', elementPath: `//span[contains(text(),'Second CF')]/../../..//span[contains(@class,'pencil-icon')]//img[contains(@src,'edit')]` }),
  secondCustomFieldInputField: ({ elementName: 'secondCustomFieldInputField', elementPath: `//strong[contains(text(),'Second CF')]/../../..//input[contains(@class,'inputTextWithLabel')]` }),
  secondCustomFieldSavedValue: ({ elementName: 'secondCustomFieldSavedValue', elementPath: `//div[@class='profile-details-inner-wrapper']//div[@class='additional-info']//span[@class='detail-item']//span[text()='Second CF']/../..//span[contains(normalize-space(),'CF Value')]` }),
  pollPost: (pollTitle) => ({ elementName: 'pollPost', elementPath: `//span[contains(text(),"${pollTitle}")]` }),
  pollImageUploaded: (pollTitle) => ({ elementName: 'pollImageUploaded', elementPath: `(//span[contains(text(),"${pollTitle}")]/../..//div[@class="img-poll-vote-wrapper"]//a/img)[1]` }),
  fetchedLocationPoll: ({ elementName: 'fetchedLocationPoll', elementPath: `//div[@class="location-container poll-location"]/p/span[@class="geo-location-text"]` }),
  postLocation: (pollTitle) => ({ elementName: 'postLocation', elementPath: `//span[contains(text(),"${pollTitle}")]/../../..//div[@class="geo-location-container"]//span[@class="geo-location-text"]` }),
  pollDropdown: (pollTitle) => ({ elementName: 'postLocation', elementPath: `//span[contains(text(),"${pollTitle}")]/../../../div/cnv-dropdowns/span/a/i` }),
  calendarDate: (date) => ({ elementName: 'calendarDate', elementPath: `//span[@class="text-info" and contains(text(),"${date}")]` }),
  hourSelection: (hours) => ({ elementName: 'hourSelection', elementPath: `//div[@id="hrs-dropdown-wrap"]/ul[@id="hrs-select"]/li[text()="${hours}"]` }),
  AMPM: ({ elementName: 'AMPM', elementPath: `//*[@id="pollTimeFormat"]` }),
  minutesSelection: (mins) => ({ elementName: 'minutesSelection', elementPath: `//div[@id="mins-dropdown-wrap"]/ul[@id="mins-select"]/li[contains(text(),"${mins}")]` }),
  pollEndTimeVerify: (pollTitle, hours) => ({ elementName: 'pollEndTimeVerify', elementPath: `//span[@class="poll-title" and contains(text(),"${pollTitle}")]/../../div[@class="note-details"]/div[@class="img-poll-vote-wrapper"]/div[@class="poll-expire-wrap"]//span[@class="exprire-date" and contains(text(),"${hours}")]` }),
  pollVoteIcon: (pollTitle) => ({ elementName: 'pollVoteIcon', elementPath: `(//span[@class="poll-title" and contains(text(),"${pollTitle}")]/../..//div[@class="img-bar-info-view"]/i)[1]` }),
  resultBar: (pollTitle) => ({ elementName: 'resultBar', elementPath: `//span[@class="poll-title" and contains(text(),"${pollTitle}")]/../../div[@class="note-details"]//div[@class="vote-bar-wrap"]/div[1]` }),
  pollEnded: (pollTitle) => ({ elementName: 'pollEnded', elementPath: `//span[@class="poll-title" and contains(text(),"${pollTitle}")]/../../div[@class="note-details"]/div[@class="img-poll-vote-wrapper"]/div[@class="poll-expire-wrap"]//span[@class="exprire-date" and contains(text(),"Poll has ended!")]` }),
  userOne: (userFullName) => ({ elementName: 'userOne', elementPath: `//ul[@class='usersList']//li//span[text()='${userFullName}']` }),
  userTwo: (userFullName) => ({ elementName: 'userTwo', elementPath: `//ul[@class='usersList']//li//span[text()='${userFullName}']` }),
  userOneRemoveButton: (userFullName) => ({ elementName: 'userOneRemoveButton', elementPath: `//ul[@class='usersList']//li//span[text()='${userFullName}']/..//span[@class='removeUser' or text()='Remove']` }),
  userTwoRemoveButton: (userFullName) => ({ elementName: 'userTwoRemoveButton', elementPath: `//ul[@class='usersList']//li//span[text()='${userFullName}']/..//span[@class='removeUser' or text()='Remove']` }),
  ackPostCreated: (postTitle) => ({ elementName: 'ackPostCreated', elementPath: `//div/a/span[contains(text(), "Test Post: ${postTitle}")]` }),
  acknowledgePostCreatedForUserOne: (postTitle) => ({ elementName: 'acknowledgePostCreatedForUserOne', elementPath: `//a/span[contains(text(),'${postTitle}')]/../../../div/div/span/u[text()='Acknowledge']` }),
  recipientsMustAcknowledgeToViewThePostCheckbox: ({ elementName: 'recipientsMustAcknowledgeToViewThePostCheckbox', elementPath: `//span[contains(text(),'Recipients must acknowledge to view the post')]` }),
  user1Suggestion: (userFullName) => ({ elementName: 'user1Suggestion', elementPath: `//li[@class='search-item']//b[text()='${userFullName}']` }),
  user1InAcknowledgePostCreatorsList: (userFullName) => ({ elementName: 'user1InAcknowledgePostCreatorsList', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList']//li//span[text()='${userFullName}']` }),
  acknowledgePostCreatedForUserTwo: (postTitle) => ({ elementName: 'acknowledgePostCreatedForUserTwo', elementPath: `//a/span[contains(text(),'${postTitle}')]/../../../div/div/span/u[text()='Acknowledge']` }),
  user2Suggestion: (userFullName) => ({ elementName: 'user2Suggestion', elementPath: `//li[@class='search-item']//b[text()='${userFullName}']` }),
  user2InAcknowledgePostCreatorsList: (userFullName) => ({ elementName: 'user2InAcknowledgePostCreatorsList', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList']//li//span[text()='${userFullName}']` }),
  user1Avatar: (userFullName) => ({ elementName: 'user1Avatar', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList']//li//span[text()='${userFullName}']/..//span[contains(@class,'user-img')]//img` }),
  user2Avatar: (userFullName) => ({ elementName: 'user2Avatar', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList']//li//span[text()='${userFullName}']/..//span[contains(@class,'user-img')]//img` }),
  user1RemoveLink: (userFullName) => ({ elementName: 'user1RemoveLink', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList']//li//span[text()='${userFullName}']/..//span[@class='removeUser' or text()='Remove']` }),
  user1AddedText: (userFullName) => ({ elementName: 'user1AddedText', elementPath: `//li[@class='search-item']//b[text()='${userFullName}']/../..//span[text()='ADDED']` }),
  searchedUser: (userFullName) => ({ elementName: 'searchedUser', elementPath: `//div[@class='manage-ack-post-creators-div']//ul[@class='usersList']//li//b[text()='${userFullName}']` }),
  userOneRemoveButtonGroup: (userFullName) => ({ elementName: 'userOneRemoveButtonGroup', elementPath: `//div[@class='settings-manage-groups-wrapper']//ul[@class='usersList']//li//span[text()='${userFullName}']/..//span[@class='removeUser' or text()='Remove']` }),
  userOneGroup: (userFullName) => ({ elementName: 'userOneGroup', elementPath: `//div[@class='settings-manage-groups-wrapper']//ul[@class='usersList']//li//span[text()='${userFullName}']` }),
  groupCreatorUserSuggestion: (userFullName) => ({ elementName: 'groupCreatorUserSuggestion', elementPath: `//li[@class='search-item']//b[text()='${userFullName}']` }),
  userPresentInGroupCreatorsList: (userFullName) => ({ elementName: 'userPresentInGroupCreatorsList', elementPath: `//div[@class='settings-manage-groups-wrapper']//ul[@class='usersList']//li//span[text()='${userFullName}']` }),
  userOneAvatarGroup: (userFullName) => ({ elementName: 'userOneAvatarGroup', elementPath: `//div[@class='settings-manage-groups-wrapper']//ul[@class='usersList']//li//span[text()='${userFullName}']/..//span[contains(@class,'user-img')]//img` }),
  verificationCodeEmailSubject: ({ elementName: 'verificationCodeEmailSubject', elementPath: `(//div/span[contains(text(),'Your verification code is ')])[1]` }),
  newVerificationCodeSentSuccessMessage: ({ elementName: 'newVerificationCodeSentSuccessMessage', elementPath: `//span[@class="msg" and text()="We've emailed you a new verification code."]` }),
  loggedInUserElipsesInTeamDirectory: (signedUpEmail) => ({ elementName: 'loggedInUserElipsesInTeamDirectory', elementPath: `//span[text()='${signedUpEmail}']/../../../../cnv-dropdowns[contains(@cnv-dropdown-ctrl, 'thisUserDrpDwnCtrl')]//i` }),
  userSuggestionForGroup: (userEmail) => ({ elementName: 'userSuggestionForGroup', elementPath: `//span/b[text()='${userEmail}']` }),
  createGroupLinkInSharedPost: (groupName) => ({ elementName: 'createGroupLinkInSharedPost', elementPath: `//span[contains(text(),'has created the ')]/a[text()='${groupName}']` }),
  acknowledge: (postTitle) => ({ elementName: 'acknowledge', elementPath: `//div/a/span[contains(text(),"${postTitle}")]/../../../../../div[@class="feed-item-content-right"]//div[@class="note"]//div[@class="note-details ackWrapper"]/div[@class="ackLabel"]//u[contains(text(),"Acknowledge")]` }),
  acknowledgePostContent: (postTitle) => ({ elementName: 'acknowledgePostContent', elementPath: `//div/a/span[contains(text(),"${postTitle}")]/../../../div[@class="note-details"]/span/p[contains(text(),"${postTitle}")]` }),
  sharedPostElipsesAcknowledge: (postTitle) => ({ elementName: 'sharedPostElipsesAcknowledge', elementPath: `//div//a/span[contains(text(),"${postTitle}")]/../../../../div[@class="action-items-wrapper"]/cnv-dropdowns/span/a/i` }),
  acknowledgePost: (postTitle) => ({ elementName: 'acknowledge', elementPath: `//div/a/span[contains(text(),"${postTitle}")]/../../../../../div[@class="feed-item-content-right"]//div[@class="note"]//div[@class="note-details ackWrapper"]/img` }),
  acknowledgedpostView: (postTitle) => ({ elementName: 'acknowledgedpostView', elementPath: `//div/a/span[contains(text(),"${postTitle}")]/../../../div[@class='note-details']/span/p[contains(text(),"${postTitle}")]/../../../..//div[@class="feed-info-container"]//li[@class="nobullet"]/a[contains(text(),"1 View")]` }),
  likeInfoWrapper: ({ elementName: 'likeInfoWrapper', elementPath: `//div[@class="like-info-wrapper"]` }),
  searchField: (domain, teammate) => ({ elementName: 'searchField', elementPath: `//div[@class="host"]/div/div[@class="tags"]/a[text()='${domain}'] | (//div[@class="host"]/div/div[@class="tags"]/a[text()='${teammate}'])[3]` }),
  importUser: (domain) => ({ elementName: 'importUser', elementPath: `(.//*[normalize-space(text()) and normalize-space(.)='${domain}'])[1]/following::input[1] | (.//*[normalize-space(text()) and normalize-space(.)='${domain}'])[1]/following::input[1]` }),
  acknowledgePostInNotification: (postTitle) => ({ elementName: 'acknowledgePostInNotification', elementPath: `//div[@class="details-wrapper"]/span[contains(text(),"shared a post with you:")]/span[contains(text(),'${postTitle}')]` }),
  sharedPostWithImageFileAttachment: (postTitle) => ({ elementName: 'sharedPostWithImageFileAttachment', elementPath: `//p[contains(text(), '${postTitle}')]/../../following-sibling::div[@id='notegallery']//a` }),
  ackPostWithLocation: (postTitle) => ({ elementName: 'ackPostWithLocation', elementPath: `//div/a/span[contains(text(), "Test Post: ${postTitle}")]/../../../..//div[@class='geo-location-container']//span[@class='geo-location-text']` }),
  fetchedLocationAckPost: ({ elementName: 'fetchedLocationAckPost', elementPath: `//p[@class="geo-location"]/span[@class="geo-location-text"]/../../../cnv-editor/following-sibling::div[@class="location-container"]//span[@class="geo-location-text"]` }),
  draftAckPost: (postTitle) => ({ elementName: 'draftAckPost', elementPath: `//div/a/span[contains(text(),"${postTitle}")]` }),
  sharedPostTitleXpath: (postTitle) => ({ elementName: 'sharedPostTitleXpath', elementPath: `//div/a/span[contains(text(),"${postTitle}")]` }),
  sharedPostTitle2: (postTitle) => ({ elementName: 'sharedPostTitle2', elementPath: `//div/a/span[contains(text(),"${postTitle}")]` }),
  sharedPostTitleToggleFeed: (postTitle) => ({ elementName: 'sharedPostTitleToggleFeed', elementPath: `(//div[@class="title-text"])[1]/a/span[contains(text(),"${postTitle}")]` }),
  commentOfFirstPost: (postTitle) => ({ elementName: 'commentOfFirstPost', elementPath: `//a/span[contains(text(),"${postTitle}")]/../../../../div[@class="feed-info-container"]//a[contains(text(),"Comment")]` }),
  commentInDetailView: (commentText) => ({ elementName: 'commentInDetailView', elementPath: `(//div[@bo-show="!showMore"]/p[contains(text(),"${commentText}")])[last()]` }),
  commentDropdownelipses: (commentText) => ({ elementName: 'commentDropdownelipses', elementPath: `(//div[@bo-show="!showMore"]/p[contains(text(),"${commentText}")])[last()]/../../../../../div/cnv-dropdowns/span/a/i` }),
  editedComment: (commentText) => ({ elementName: 'editedComment', elementPath: `//div[contains(@class,"comments-container")]//div[@bo-show="!showMore"]/p[text() = "Comment Edited: ${commentText}"]` }),
  feedViewCreatedComment: (commentText) => ({ elementName: 'feedViewCreatedComment', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[contains(text(),'${commentText}')]` }),
  feedViewCreatedCommentReplyLink: (commentText) => ({ elementName: 'feedViewCreatedCommentReplyLink', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[text()='${commentText}']/../../../..//span/a[text()='Reply']` }),
  imageFileAttachmentInSharedPost: (postTitle) => ({ elementName: 'imageFileAttachmentInSharedPost', elementPath: `//p[contains(text(), '${postTitle}')]/../../following-sibling::div[@id='notegallery']//a` }),
  createdCommentInPostInCommentPanel: (commentText) => ({ elementName: 'createdCommentInPostInCommentPanel', elementPath: `//cnv-notes-app//div[@bo-show='!showMore']/p[text()='${commentText}: Post Comment']` }),
  createdCommentInPostElipses: (commentText) => ({ elementName: 'createdCommentInPostElipses', elementPath: `//cnv-notes-app//div[@bo-show='!showMore']/p[text()='${commentText}: Post Comment']/../../../..//a/i` }),
  feedViewCreatedCommentWithEmoji: (commentText) => ({ elementName: 'feedViewCreatedCommentWithEmoji', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[text()='${commentText}: Comment With Emoji. 😀']` }),
  feedViewCreatedCommentCommentPanel: (commentText) => ({ elementName: 'feedViewCreatedCommentCommentPanel', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[text()='${commentText}: Please like this comment.']` }),
  feedViewCreatedCommentLikeLink: (commentText) => ({ elementName: 'feedViewCreatedCommentLikeLink', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[text()='${commentText}: Please like this comment.']/../../../..//span/a[text()='Like']` }),
  feedViewCreatedCommentUnLikeLink: (commentText) => ({ elementName: 'feedViewCreatedCommentUnLikeLink', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[text()='${commentText}: Please like this comment.']/../../../..//span/a[text()='Unlike']` }),
  createdCommentLikeCount: (commentText) => ({ elementName: 'createdCommentLikeCount', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[text()='${commentText}: Please like this comment.']/../../../..//span[@class='likes_count']/span` }),
  feedViewCreatedCommentReply: (commentText) => ({ elementName: 'feedViewCreatedCommentReply', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[text()='${commentText}: Please reply to this comment.']` }),
  feedViewCreatedCommentReplyReplyLink: (commentText) => ({ elementName: 'feedViewCreatedCommentReplyReplyLink', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[text()='${commentText}: Please reply to this comment.']/../../../..//span/a[text()='Reply']` }),
  replyToCommentFromSecondUser: (commentText) => ({ elementName: 'replyToCommentFromSecondUser', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[contains(text(),'${commentText}: Reply From Second User.')]` }),
  galleryViewCreatedComment: (commentText) => ({ elementName: 'galleryViewCreatedComment', elementPath: `//cnv-notes-app//div[@bo-show='!showMore']/p[contains(text(),'${commentText}')]` }),
  galleryViewCreatedCommentLikeLink: (commentText) => ({ elementName: 'galleryViewCreatedCommentLikeLink', elementPath: `//cnv-notes-app//div[@bo-show='!showMore']/p[text()='${commentText}: Please like this comment in gallery view.']/../../../..//span/a[text()='Like']` }),
  galleryViewCreatedCommentUnLikeLink: (commentText) => ({ elementName: 'galleryViewCreatedCommentUnLikeLink', elementPath: `//cnv-notes-app//div[@bo-show='!showMore']/p[text()='${commentText}: Please like this comment in gallery view.']/../../../..//span/a[text()='Unlike']` }),
  createdCommentLikeCountInGalleryView: (commentText) => ({ elementName: 'createdCommentLikeCountInGalleryView', elementPath: `//cnv-notes-app//div[@bo-show='!showMore']/p[text()='${commentText}: Please like this comment in gallery view.']/../../../..//span[@class='likes_count']/span` }),
  galleryViewCreatedCommentReplyLink: (commentText) => ({ elementName: 'galleryViewCreatedCommentReplyLink', elementPath: `//cnv-notes-app//div[@bo-show='!showMore']/p[text()='${commentText}: Please reply to this comment in gallery view.']/../../../..//span/a[text()='Reply']` }),
  replyToCommentFromSecondUserInGalleryView: (commentText) => ({ elementName: 'replyToCommentFromSecondUserInGalleryView', elementPath: `//cnv-notes-app//div[@bo-show='!showMore']/p[contains(text(),'${commentText}: Reply From Second User In Gallery View.')]` }),
  createdCommentInFeedViewElipses: (commentText) => ({ elementName: 'createdCommentInFeedViewElipses', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[contains(text(),'${commentText}')]/../../../..//a/i` }),
  feedViewEditedComment: (commentText) => ({ elementName: 'feedViewEditedComment', elementPath: `//cnv-feed-item//div[@bo-show='!showMore']/p[text()='${commentText}: Please edit this comment. Edited.']` }),
  imageFileAttachmentInSharedPost2: (postTitle) => ({ elementName: 'imageFileAttachmentInSharedPost2', elementPath: `//p[contains(text(),'${postTitle}')]/../../following-sibling::div[@id='notegallery']//a` }),
  tagVerificationInDetail: ({ elementName: 'tagVerificationInDetail', elementPath: `//li[@ng-repeat="tag in noteData.item.tagList"]/a[contains(text(),"#Database")] | //li[@ng-repeat="tag in noteData.item.tagList"]/a[contains(text(),"#database")]` }),
  tagVerificationInDetailVerified: ({ elementName: 'tagVerificationInDetail', elementPath: `//li[@ng-repeat="tag in noteData.item.tagList"]/a[contains(text(),"#Computer")] | //li[@ng-repeat="tag in noteData.item.tagList"]/a[contains(text(),"#computer")]` }),
  tagVerificationInDetailTissuePaper: ({ elementName: 'tagVerificationInDetail', elementPath: `//li[@ng-repeat="tag in noteData.item.tagList"]/a[contains(text(),"#Tissue")] | //li[@ng-repeat="tag in noteData.item.tagList"]/a[contains(text(),"#tissue")]` }),
  snippetPlayback: ({ elementName: 'snippetPlayback', elementPath: `(//div[@class="textSnippet"]/span)[last()]` }),
  uploadedImageVerification: ({ elementName: 'uploadedImageVerification', elementPath: `//div[@class="file_holder"]/a/img` }),
  mentionedUserNameSuggestion: (userFullName) => ({ elementName: 'mentionedUserNameSuggestion', elementPath: `//b[text()='${userFullName}']` }),
  mentionedUserName: (userFullName) => ({ elementName: 'mentionedUserName', elementPath: `(//div[@bo-show="!showMore"]/p/a[text()="@${userFullName}"])[last()]` }),
  createdCommentText: (commentText) => ({ elementName: 'createdCommentText', elementPath: `(//div[contains(@class,"comments-container")]//div[@bo-show="!showMore"]/p[contains(text(),"${commentText}")])[last()]` }),
  commentElipsesInDetail: (commentText) => ({ elementName: 'commentElipsesInDetail', elementPath: `(//div[contains(@class,"comments-container")]//div[@bo-show="!showMore"]/p[contains(text(),"${commentText}")])[last()]/../../../../../div/cnv-dropdowns/span/a/i` }),
  copiedCommentLink: (commentText) => ({ elementName: 'copiedCommentLink', elementPath: `(//div[contains(@class,"comments-container")]//div[@bo-show="!showMore"]/p/a[contains(text(),"${commentText}")])[last()]` }),
  editedCommentInDetail: (commentText) => ({ elementName: 'editedCommentInDetail', elementPath: `(//div[contains(@class,"comments-container")]//div[@bo-show="!showMore"]/p[contains(text(),"${commentText}")])[last()]` }),
  editedCommentTimestamp: (commentText) => ({ elementName: 'editedCommentTimestamp', elementPath: `(//div[contains(@class,"comments-container")]//div[@bo-show="!showMore"]/p[text() = "Comment Edited TS: ${commentText}"])[last()]/../../..//a[text()="now"]` }),
  createdCommentWithEmoticon: (commentText) => ({ elementName: 'createdCommentWithEmoticon', elementPath: `(//div[contains(@class,"comments-container")]//div[@bo-show="!showMore"]/p[contains(text(), "Comment: ${commentText}😀")])[last()]` }),
  userName: (userFullName) => ({ elementName: 'userName', elementPath: `//span/b[contains(text(),"${userFullName}")]` }),
  shareWithOthersUserSuggestion: (userFullName) => ({ elementName: 'shareWithOthersUserSuggestion', elementPath: `//li[contains(@class,'suggestion-item')]//span[text()='${userFullName}']` }),
  mentionedFirstGroup: (groupName) => ({ elementName: 'mentionedFirstGroup', elementPath: `(//div[@bo-show='!showMore']/p/a[text()='@${groupName}'])[last()]` }),
  commentsAreClosedForThisPostTextEnableSharing: (postTitle) => ({ elementName: 'commentsAreClosedForThisPostTextEnableSharing', elementPath: `//a/span[text()='Test Post: ${postTitle}']/../../../..//span[contains(text(),'Comments are closed')]` }),
  mentionedGroupInDetail: (groupName) => ({ elementName: 'mentionedGroupInDetail', elementPath: `//span[text()='${groupName}' and @class='pill-text']` }),
  groupSuggestionEnableSharing: (groupName) => ({ elementName: 'groupSuggestionEnableSharing', elementPath: `//b[contains(text(), '${groupName}')]` }),
  geoLocationAddressInCreatedNormalPost: (postTitle) => ({ elementName: 'geoLocationAddressInCreatedNormalPost', elementPath: `(//a/span[contains(text(),'${postTitle}')]/../../../..//span[@class='geo-location-text'])[1]` }),
  groupSuggestionGeoLocation: (groupName) => ({ elementName: 'groupSuggestionGeoLocation', elementPath: `//b[contains(text(), '${groupName}')]` }),
  defaultRecipientGroupCrossIcon: (groupName) => ({ elementName: 'defaultRecipientGroupCrossIcon', elementPath: `//span[text()='${groupName}']/..//div` }),
  createdPostWithoutLocation: (postTitle) => ({ elementName: 'createdPostWithoutLocation', elementPath: `//a/span[text()='Test Post: ${postTitle}']/../../../..//div/div[@class='geo-location-container']` }),
  groupSuggestionInDetailView: (groupName) => ({ elementName: 'groupSuggestionInDetailView', elementPath: `//cnv-dropdown//b[text()='${groupName}']` }),
  userSuggestionGeoLocation: (userEmail) => ({ elementName: 'userSuggestionGeoLocation', elementPath: `//span/b[text()='${userEmail}']` }),
  geoLocationAddressInCreatedPollPost: (pollTitle) => ({ elementName: 'geoLocationAddressInCreatedPollPost', elementPath: `(//span[text()='Test Poll Post: ${pollTitle}']/../../../..//span[@class='geo-location-text'])[1]` }),
  postWithMessageLocationAccessPermissionNotGranted: (postTitle) => ({ elementName: 'postWithMessageLocationAccessPermissionNotGranted', elementPath: `//a/span[text()='Test Post: ${postTitle}']/../../../..//p/span[contains(text(),'LOCATION ACCESS PERMISSION NOT GRANTED')]` }),
  groupSuggestionforappSettings: (groupName) => ({ elementName: 'groupSuggestionforappSettings', elementPath: `//b[contains(text(), '${groupName}')]` }),
  yahooSignInHomeButton: ({ elementName: 'yahooSignInHomeButton', elementPath: `//div/a[text()='Sign in']` }),
  allowRecipientToSharePostCheckedCheckbox: ({ elementName: 'allowRecipientToSharePostCheckedCheckbox', elementPath: `//label[@for='allow-recipients-checkbox']` }),
  managePostPermisionHeadingText: ({ elementName: 'managePostPermisionHeadingText', elementPath: `//p[contains(text(),"When your teammate start a new post, we’ll show this post permission pre-selected as default in the list of available permissions.")]` }),
  setDefaultPermissionInManagePost: ({ elementName: 'setDefaultPermissionInManagePost', elementPath: `//div[contains(text(),"Set default permission")]/..//button[contains(text(),"Can edit and comments")]` }),
  postPermissionDropdownIcon: ({ elementName: 'postPermissionDropdownIcon', elementPath: `//i[@class="icon cnv-icons-12 icons2_Dropdown-darkgray"]` }),
  postPermissionDropdownMenu: ({ elementName: 'postPermissionDropdownMenu', elementPath: `//ul[@class="dropdown-menu" and @role="menu"]` }),
  comentOnlyOptionInPostPermissionDropdown: ({ elementName: 'comentOnlyOptionInPostPermissionDropdown', elementPath: `//ul[@class="dropdown-menu"]/..//a[contains(text(),"Comment only")]` }),
  changeSetDefaultPermissionInManagePost: ({ elementName: 'changeSetDefaultPermissionInManagePost', elementPath: `//div[contains(text(),"Set default permission")]/..//button[contains(text(),"Comment only")]` }),
  toInputFieldIcon: ({ elementName: 'toInputFieldIcon', elementPath: `//i[@class="cnv-icons-12 icons2_Dropdown-lightgray"]` }),
  commentOnlyWithTickOptionInToInputFeildDropdown: ({ elementName: ' commentOnlyWithTickOptionInToInputFeildDropdown', elementPath: `//span[contains(text(),"Comment only")]/..//i` }),
  canEditAndCommentWithTickOptionInToInputFeildDropdown: ({ elementName: ' canEditAndCommentWithTickOptionInToInputFeildDropdown', elementPath: `//span[contains(text(),"Can edit and comments")]/../i` }),
  canEditAndCommentOptionInPostPermissionDropdown: ({ elementName: 'canEditAndCommentOptionInPostPermissionDropdown', elementPath: `//ul[@class="dropdown-menu"]/..//a[contains(text(),"Can edit and comments")]` }),
  allowRecipientToSharePostUnCheckbox: ({ elementName: 'allowRecipientToSharePostUncheckbox', elementPath: `//div[@id="allow-recipients-to-share"]//span[contains(text(),"Allow recipients to share the post further")]/..//input[@class="cnv-checkbox ng-untouched ng-valid ng-dirty ng-valid-parse ng-empty"]` }),
  allowRecipientToSharePostCheckbox: ({ elementName: 'allowRecipientToSharePostCheckbox', elementPath: `//div[@id="allow-recipients-to-share"]//span[contains(text(),"Allow recipients to share the post further")]/..//label` }),
  canEditAndCommentOptionInDefaultPermissionDropdown: ({ elementName: 'canEditAndCommentOptionInDefaultPermissionDropdown', elementPath: `//a[contains(text(),"Can edit and comments")]` }),
  commentOnlyOptionInDefaultPermissionDropdown: ({ elementName: 'commentOnlyOptionInDefaultPermissionDropdown', elementPath: `//a[contains(text(),"Comment only")]` }),
  viewOnlyOptionInDefaultPermissionDropdown: ({ elementName: 'viewOnlyOptionInDefaultPermissionDropdown', elementPath: `//a[contains(text(),"View only")]` }),
  HidePostFromMyFeed: ({ elementName: 'HidePostFromMyFeed', elementPath: `(.//*[normalize-space(text()) and normalize-space(.)='To:'])[1]/following::input[3]/..//a` }),
  HideButtonFromMyFeed: ({ elementName: 'HideButtonFromMyFeed', elementPath: `//button[contains(text(),"Hide")]` }),
  profileDropdownSetting: ({ elementName: 'profileDropdownSetting', elementPath: '//span[text()="Settings"]' }),
  everyoneGroupInHideGroupDropdown: ({ elementName: 'everyoneGroupInHideGroupDropdown', elementPath: '//span[contains(text(),"Everyone")]' }),
  HideGroupLinkInHidePostInaAppSetting: ({ elementName: 'HideGroupLinkInHidePostInaAppSetting', elementPath: `//a[contains(text(),"View 1 hidden groups")]` }),
  CheckEveyoneGroupInUnhideGroupsPopUpModel: ({ elementName: 'CheckHideGroupInUnhideGroupsPopUpModel', elementPath: `//div[contains(text(),"Everyone")]/..//button[contains(text(),"Unhide")]` }),
  UnhideGroupsCrossIcon: ({ elementName: 'CheckHideGroupInUnhideGroupsPopUpModel', elementPath: `//button[contains(text(),"×")]` }),
  publicGroupEveryone: ({ elementName: 'publicGroupEveryone', elementPath: `//div[@class="pull-left"]/..//a[contains(text(),"Everyone")]` }),
  unHideGroupButton: ({ elementName: 'unHideGroupButton', elementPath: '//button[contains(text(),"Unhide")]' }),
  convoLogo: ({ elementName: 'convoLogo', elementPath: '//img[@class="logo"]' }),
  noGroupHide: ({ elementName: 'noGroupHide', elementPath: '//div[contains(text(),"No hidden groups.")]' }),
  commentCounterLink: (postTitle) => ({ elementName: 'createdPostCommentLink', elementPath: `//a/span[contains(text(),'${postTitle}')]/../../../..//a[contains(text(),"22  comments")]` }),
  hideCommentLink: (postTitle) => ({ elementName: 'createdPostCommentLink', elementPath: `//a/span[contains(text(),'${postTitle}')]/../../../..//a[contains(text(),"Hide comments")]` }),
  newCommentsBanner: ({ elementName: 'newCommentsBanner', elementPath: '//span[contains(text(),"New Comments")]' }),
  hidePostFromMyFeedinput: ({ elementName: 'hidePostFromMyFeedinput', elementPath: `(.//*[normalize-space(text()) and normalize-space(.)='To:'])[1]/following::input[3]` }),
  commentCollectionInCommentScrollbarPanel: ({ elementName: 'commentCollectionInCommentScrollbarPanel', elementPath: '//div[@class="bottom-bar comments-collection comments-scrollable-panel"]' }),
  commentCounterAnotherLink: ({ elementName: 'commentCounterAnotherLink', elementPath: '//a[contains(text(),"9 comments")]' }),
  newChatIcon: ({ elementName: 'newChatIcon', elementPath: '//div[@class="create-new-feed-chat-btn"]' }),
  toInputFeildNewChat: ({ elementName: 'toInputFeildNewChat', elementPath: '//div[@class="tags focused"]/../../..//span[contains(text(),"To:")]' }),
  newchatSearchInputField:({ elementName: 'newchatSearchInputField', elementPath: '//div[@class="tags focused"]/../../..//span[contains(text(),"To:")]/../..//a[@class="add-more-placeholder"]' }),
  crossIconForChatClose :({ elementName: 'crossIconForChatClose', elementPath: '//div[@class="namesPopover"]/../..//div[@class="btnClose"]' }),
  chatStatusDropdown :({ elementName: 'chatStatusDropdown', elementPath: '//span[@class="dropdown cnv-custom-dropdown open"]/..//ul[@class="dropdown-menu dropdown-main-menu dropdown-menu-right"]' }),
  availableStatusForChat :({ elementName: 'availableStatusForChat', elementPath: '//span[contains(text(),"Available")]' }),
  busyStatusForChat :({ elementName: 'busyStatusForChat', elementPath: '//span[contains(text(),"Busy")]' }),
  turnOnChatNotification :({ elementName: ' turnOnChatNotification', elementPath: '//span[contains(text(),"Turn off notifications")]' }),
  turnOnChatSound:({ elementName: 'turnOnChatSound', elementPath: '//span[contains(text(),"Turn off sounds")]' }),
  redChatActiveIcon: ({ elementName: 'redChatActiveIcon', elementPath: `//span[text()='Chats']/../div/div[@class="listUserStatusBusy"]` }),
  userChatStatusText: (userName) => ({ elementName: 'userName', elementPath: `//div[contains(text(),"${userName} is busy")]` }),
  userChatIdleStatusText: (userName) => ({ elementName: 'userName', elementPath: `//div[contains(text(),"${userName} is idle")]` }),
  addMoreParticipantInGroupChatIcon : ({ elementName: 'addMoreParticipantInGroupChatIcon', elementPath: '//div[@class="addToChat"]' }),
  addTeamMateToGroupChatButton : ({ elementName: 'addTeamMateToGroupChatButton', elementPath: '//button[contains(text(),"Add")]' }),
  participantInGroupSetting: ({ elementName: 'participantInGroupSetting', elementPath: `//span[contains(text(),"Participants")]` }),
  participantListInGroupChat :({ elementName: 'participantListInGroupChat', elementPath: '//div[@class="participantsList "]' }),
  userOneInParticipantList: ({ elementName: 'userName', elementPath: `//div[@class="participantsList "]/../../..//span[contains(text(),"U O")]` }),
  userTwoInParticipantList: ({ elementName: 'userName', elementPath: `//div[@class="participantsList "]/../../..//span[contains(text(),"U T")]` }),
  userThreeInParticipantList: ({ elementName: 'userName', elementPath: `//div[@class="participantsList "]/../../..//span[contains(text(),"U T")]` }),
  UserInvitationText:(userName) => ({ elementName: 'userName', elementPath: `//span[contains(text(),"You have invited ${userName}")]` }),
  firstCustomFieldForAdmin: ({ elementName: 'firstCustomFieldForAdmin', elementPath: `//span[contains(text(),'First CF')]` }),
  firstCustomFieldLockImageForAdmin: ({ elementName: 'firstCustomFieldLockImageForAdmin', elementPath: `//span[contains(text(),'First CF')]/../../..//span[contains(@class,'pencil-icon')]//img[contains(@src,'lock')]` }),
  secondCustomFieldForAdmin: ({ elementName: 'secondCustomFieldForAdmin', elementPath: `//span[contains(text(),'Second CF')]` }),
  secondCustomFieldPencilImageForAdmin: ({ elementName: 'secondCustomFieldPencilImageForAdmin', elementPath: `//span[contains(text(),'Second CF')]/../../..//span[contains(@class,'pencil-icon')]//img[contains(@src,'edit')]` }),
  editProfileSection : ({ elementName: 'editProfileSection', elementPath: '//div[@class="users-profile-edit-overlay"]//div[@class="row no-margin"]' }),
  secondCustomFieldInputText: ({ elementName: 'secondCustomFieldInputText', elementPath: `//span[@class="input-label-text-strong" and contains(text(),"Second CF:")]/..` }),
  SharedPostDropdown: ({ elementName: 'SharedPostDropdown', elementPath: `//span[contains(text(),"Open post")]/../../..` }),
  openPostInDetailView: (postTitle) => ({ elementName: 'openPostInDetailView', elementPath: `//div[@class="title"]//span[contains(text(), 'Test Post: ${postTitle}')]` }),
  addedTagText: (postTitle) => ({ elementName: 'addedTagText', elementPath: `//span[contains(text(), 'Test Post: ${postTitle}')]/../../../..//a[contains(text(),"#MyTag")] | //span[contains(text(), 'Test Post: ${postTitle}')]/../../../..//a[contains(text(),"#mytag")]` }),
  sharedTextForPost: (postTitle) => ({ elementName: 'sharedTextForPost', elementPath: `//span[contains(text(), 'Test Post: ${postTitle}')]/../../../..//a[contains(text(),"shared")]` }),
  starIconInPost :(postTitle) => ({ elementName: 'starIconInPost', elementPath: `//span[contains(text(), 'Test Post: ${postTitle}')]/../../../..//i[@class="cnv-icons-16 icons_Star-blue"]` }),
  muteIconInPost :(postTitle) => ({ elementName: 'muteIconInPost', elementPath: `//span[contains(text(), 'Test Post: ${postTitle}')]/../../../..//i[@class="cnv-icons-16 bell-mute"]`}),
  privateGroupsDisplayed: ({elementName: 'privateGroupsDisplayed', elementPath:`//li[@class='clearfix parent on-boarding-private-group'] | //span[text()='No private groups available']`}),
  myGroupsTag: ({elementName: 'myGroupsTag', elementPath:`(//div[@class='app-sub-header']/a)[2]`}),
  firstGroupDropdown: ({elementName: 'firstGroupDropdown', elementPath:`(//div[@class='group-details']//a)[1]/../../../..//cnv-dropdowns//i`}),
  deleteGroupButtonInGroupDirectory: ({elementName: 'deleteGroupButton', elementPath:`//button[@class='btn btn-primary' and text()='Delete']`}),
  clickforScroll: ({elementName: 'deleteGroupButton', elementPath:`(//i[@class='group-dp cnv-icons-20 privateGroup_icon-lightgray'])[1]`}),
  secondGroupDropdown: ({elementName: 'firstGroupDropdown', elementPath:`(//div[@class='group-details']//a)[2]/../../../..//cnv-dropdowns//i`}),
  groupAddedInDefaultRecepientVerification: (groupName) => ({elementName: 'groupAddedInDefaultRecepientVerification', elementPath:`//span[@class='pill-text' and contains(text(),'${groupName}')]`}),
  twitterGroupVerification: (groupName) => ({elementName: 'twitterGroupVerification', elementPath:`//li[@ng-repeat='group in topGroups']/a[contains(text(),'${groupName}')]`}),
  firstIntegrationDeletion: ({elementName: 'firstIntegrationDeletion', elementPath:`(//div[@class='integration-details']//a/span/../../../../../../..//cnv-dropdowns[contains(@bo-if,'dropdownCtrl.options')]//i)[1]`}),
  secondIntegrationDeletion: ({elementName: 'secondIntegrationDeletion', elementPath:`(//div[@class='integration-details']//a/span/../../../../../../..//cnv-dropdowns[contains(@bo-if,'dropdownCtrl.options')]//i)[2]`}),
  inlineInsertHeading: ({elementName: 'inlineInsertHeading', elementPath:`//h4[contains(text(),'Insert link')]`}),
  allfiles: ({elementName: 'inlineInsertHeading', elementPath:`//span[contains(text(),'All ')]/b[contains(text(),'files')]`}),
  groupEmailHeading: ({elementName: 'groupEmailHeading', elementPath:`//span[contains(text(),'Group email')]`}),
  groupNameHeadingInGroupDirectory: (groupName) => ({elementName: 'groupNameHeadingInGroupDirectory', elementPath:`//h4[contains(text(),'${groupName}')]`}),
  loadingSpinnerinGalleryView: ({elementName: 'loadingSpinnerinGalleryView', elementPath:`//img[contains(@style,'visibility: visible')]`}),
  videoUploadingVerification: (postTitle) => ({elementName: 'videoUploadingVerification', elementPath:`//div/a/span[contains(text(), 'Test Post: ${postTitle}')]/../../..//div[@class='videoHoverIcon']`}),
  spinnerForFeedLoading: ({elementName: 'spinnerForFeedLoading', elementPath:`//div[@class='cnv-spinner']`}),
  filterIconInUnifiedChat: ({elementName: 'filterIconInUnifiedChat', elementPath:`//button[@class='btn search-filter-icon']/i`}),
  networksVerificationUnifiedChat: (networkName) => ({elementName: 'network1VerificationUnifiedChat', elementPath:`//div[@class='cnv-simple-filter-options']/span[text()='${networkName}']`}),
  disableApplyButton: ({elementName: 'disableApplyButton', elementPath:`//button[@class='btn btn-primary text-uppercase unified-chat-disable-button']`}),
  addnetworkPlaceholder: ({elementName: 'addnetworkPlaceholder', elementPath:`//div[@class='tags']/a[contains(text(),'FILTER TO ADD NETWORK')]`}),
  addnetworkSearchField: ({elementName: 'addnetworkSearchField', elementPath:`//div[@class='tags']/a[contains(text(),'FILTER TO ADD NETWORK')]/../input`}),
  greytickIconUnselected: (networkName) => ({elementName: 'greytickIconUnselected', elementPath:`//div[@class='cnv-simple-filter-options']/span[text()='${networkName}']/../i[@class='cnv-icons-14 check-circle-grey']`}),
  bluetickSelected: (networkName) => ({elementName: 'bluetickSelected', elementPath:`//div[@class='cnv-simple-filter-options']/span[text()='${networkName}']/../i[@class='cnv-icons-14 check-circle-blue']`}),
  applyButtonEnabled: ({elementName: 'applyButtonEnabled', elementPath:`//button[@class='btn btn-primary text-uppercase']`}),
  searchfieldafterInput: ({elementName: 'searchfieldafterInput', elementPath:`//div[@class='tags focused']`}),
  selectedNetworksVerificationInSearchField: (networkName) => ({elementName: 'selectedNetworksVerificationInSearchField', elementPath:`//span[@class='pill-text' and text()='${networkName}']`}),
  networkandUserchatVerification: (networkName, userName) => ({elementName: 'networkandUserchatVerification', elementPath:`//div[@class='separator-title' and text()='${networkName}']/..//div[@class='listUserName' and text()='${userName}']`}),
  closeteammateIcon: ({elementName: 'closeteammateIcon', elementPath:`//div[@class='closeTeammateIcon']`}),
  userInformationOnHovering: (networkName, userName) => ({elementName: 'userInformationOnHovering', elementPath:`//div[@class='separator-title' and text()='${networkName}']/..//div[@class='listUserName' and text()='${userName}']/../..//cnv-user-profile-image`}),
  userEmailOnHovering: ({elementName: 'userEmailOnHovering', elementPath:`//p[@class='email']`}),
  userNameOnHovering: ({elementName: 'userNameOnHovering', elementPath:`//p[@class='full-name']`}),
  networkNameOnHovering: ({elementName: 'networkNameOnHovering', elementPath:`//p[@class='network-name']`}),
  crossSelectedNetwork: (networkName) => ({elementName: 'crossSelectedNetwork', elementPath:`//span[@class='pill-text' and text()='${networkName}']/..//a[@class='remove-button icons2_Close-lightgray']`}),
  blockButton: ({elementName: 'blockButton', elementPath:`//button[text()='Block '] | //button[text()='Block']`}),
  continueButton: ({elementName: 'continueButton', elementPath:`//button[text()='Continue ']`}),
  blockthisUser: ({elementName: 'blockthisUser', elementPath:`//span[text()='Block this user']`}),
  blockConfirmationButton: ({elementName: 'blockConfirmationButton', elementPath:`//button[text()='Block']`}),
  blockedUserMessage: ({elementName: 'blockedUserMessage', elementPath:`//div[@class='system-chat-msg']`}),
  unblockButton1: ({elementName: 'unblockButton1', elementPath:`//button[text()='Unblock'] | //button[text()='Unblock ']`}),
  cancelUnblockButton: ({elementName: 'cancelUnblockButton', elementPath:`//button[text()='Cancel'] | //button[text()='Cancel ']`}),
  unblockthisUserOptioninSettings: ({elementName: 'unblockthisUserOptioninSettings', elementPath:`//span[text()='Unblock this user']`}),
  closeButtonInUnifiedChat: ({elementName: 'closeButtonInUnifiedChat', elementPath:`//button[@class='close']`}),
  reportthisUserOptioninSettings: ({elementName: 'reportthisUserOptioninSettings', elementPath:`//span[text()='Report this user']`}),
  reportButtonInReportthisUser: ({elementName: 'reportButtonInReportthisUser', elementPath:`//button[text()='Report']`}),
  chatsharedwithAdmin: (latestMessage) => ({elementName: 'chatsharedwithAdmin', elementPath:`//span[text()='Reported Chat']/../../..//span/p[contains(text(),'${latestMessage}')]`}),
  reportedChat: ({elementName: 'reportedChat', elementPath:`//span[text()='Reported Chat']/../../../../div[@class='shared-with-container']/a[text()='Convo Pilot']/..//li/a[text()='now']`}),
  userVerification: (userName) => ({elementName: 'userVerification', elementPath:`//div[@class='listUserName' and text()='${userName}']`}),
  suggestedUserInGroupchat: (userEmail) => ({elementName: 'suggestedUserInGroupchat', elementPath:`//span[@class='sec-label' and text()='${userEmail}']`}),
  p2pChatSettingsGearIcon2: ({ elementName: 'p2pChatSettingsGearIcon2', elementPath: `(//cnv-dropdowns[@cnv-dropdown-ctrl='chatOptions']/span)[2]` }),
  blockButtonNew: ({ elementName: 'blockButtonNew', elementPath: `//button[@class='btn btn-primary' and text()='Block']` }),
  guestUserUnabletobeAddedInGroupChat: ({elementName: 'guestUserUnabletobeAddedInGroupChat', elementPath: `//p[text()='You can’t add either guest or whitelisted users to any unified group chat. Please create a new chat with the users of your own network to add them.']`}),
  okButtonInUnifiedChat: ({elementName: 'okButtonInUnifiedChat', elementPath:`//button[@class='btn btn-primary' and text()='Ok']`}),
  filterIconInBigChat: ({elementName: 'filterIconInBigChat', elementPath:`//button[@class='btn search-filter-icon']/i`}),
  newchatButtonInBigChat: ({elementName: 'newchatButtonInBigChat', elementPath:`//div[@class='create-new-chat-btn']/i`}),
  filterIconforNewChatInBigChat: ({elementName: 'newchatButtonInBigChat', elementPath:`(//button[@class='btn search-filter-icon']/i)[2]`}),
  chatsearchInputFieldBigChat: ({elementName: 'chatsearchInputFieldBigChat', elementPath:`//input[@class='chats-search-input']`}),
  closeteammateIconInBigChat: ({elementName: 'closeteammateIconInBigChat', elementPath:`//div[@class='cancel-chats-search-icon']`}),
  networkandUserchatVerificationInBigChat: (networkName, userName) => ({elementName: 'networkandUserchatVerificationInBigChat', elementPath:`//div[@class='separator-title' and text()='${networkName}']/..//div[@class='chat-list-item-user-name' and text()='${userName}']`}),
  groupchatsInBigChat: ({elementName: 'groupchatsInBigChat', elementPath:`//div[@class='separator-title' and text()='Group Chats (Global)']`}),
  expandIconInBigChat: ({elementName: 'expandIconInBigChat', elementPath:`//div[@class='expandSettingsBtn icon-button']/i`}),
  chatSettingsOptionInBigChat: ({elementName: 'chatSettingsOptionInBigChat', elementPath:`//cnv-dropdowns[@cnv-dropdown-ctrl='chatOptions']`}),

  

}